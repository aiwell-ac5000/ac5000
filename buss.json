[
    {
        "id": "79aac880e5f35bdf",
        "type": "subflow",
        "name": "Lavenergy Modus",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 180,
                "wires": [
                    {
                        "id": "5e5a2d4c6e39347d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 260,
                "wires": [
                    {
                        "id": "faba89ed24ec38da",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d0166460177942a1",
        "type": "function",
        "z": "79aac880e5f35bdf",
        "name": "Compare Device Time with Sent Time Range",
        "func": "// Compare Device Time with Sent Time Range & Reset Valve Max When It is Not Within Range.\n// Hamed Jalalian Javadpour V0.0.1 Published: 1/19/2023\nif (msg && msg.topic === 'LAVENERGY' && msg.payload.id === flow.get(\"SD_ID\")) {\n    flow.set(\"fra\", msg.payload.val.fra)\n    flow.set(\"til\", msg.payload.val.til)\n}\n\nvar now = new Date().toLocaleTimeString('en-fr', {\n    hour12: false,\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    timeZone: 'CET',\n});\n\nif (flow.get(\"fra\") && flow.get(\"til\") && now > flow.get(\"fra\") && now < flow.get(\"til\")) {\n    flow.set(\"LE\", 1)\n    return null;\n}\nelse {\n    flow.set(\"fra\", undefined)\n    flow.set(\"til\", undefined)\n    flow.set(\"LE\", 0)\n    return { payload: flow.get(\"LE\") === 0 ? true : false, id: flow.get(\"LE\") === 0 && flow.get(\"SD_ID\") && typeof flow.get(\"SD_ID\") === 'number' ? flow.get(\"SD_ID\") : \"Id is not defined!\" , topic: flow.get(\"LE\") === 0 ? \"RESET_VALVE_MAX\" : \"\"}\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 260,
        "wires": [
            [
                "faba89ed24ec38da"
            ]
        ]
    },
    {
        "id": "428088bdecc60f0d",
        "type": "inject",
        "z": "79aac880e5f35bdf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 380,
        "wires": [
            [
                "8c94cbd18fe1a3aa"
            ]
        ]
    },
    {
        "id": "faba89ed24ec38da",
        "type": "switch",
        "z": "79aac880e5f35bdf",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 690,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "8c94cbd18fe1a3aa",
        "type": "switch",
        "z": "79aac880e5f35bdf",
        "name": "",
        "property": "LE",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 320,
        "wires": [
            [
                "d0166460177942a1"
            ]
        ]
    },
    {
        "id": "5e5a2d4c6e39347d",
        "type": "switch",
        "z": "79aac880e5f35bdf",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SD_ID",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 220,
        "wires": [
            [
                "954e2197d255de42"
            ],
            [
                "d0166460177942a1"
            ]
        ]
    },
    {
        "id": "954e2197d255de42",
        "type": "change",
        "z": "79aac880e5f35bdf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "SD_ID",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "d76e8ee33ccc284d",
        "type": "subflow",
        "name": "Singel-sone",
        "category": "Applikasjoner",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "2f03f61262c880d1"
                    },
                    {
                        "id": "ae6ceb27c62969f9"
                    },
                    {
                        "id": "a6b3316227e207e2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1200,
                "y": 40,
                "wires": [
                    {
                        "id": "9f12422fa7540eb7",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1320,
                "y": 60,
                "wires": [
                    {
                        "id": "795acbfe57676d37",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1860,
                "y": 40,
                "wires": [
                    {
                        "id": "b4787226e8081465",
                        "port": 0
                    }
                ]
            },
            {
                "x": 2040,
                "y": 140,
                "wires": [
                    {
                        "id": "017343e4d179fae5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "LABEL",
                "type": "str",
                "value": "Gatevarme",
                "ui": {
                    "label": {
                        "en-US": "Navn"
                    }
                }
            },
            {
                "name": "DISPLAY_VALVE_PRIME",
                "type": "bool",
                "value": "false",
                "ui": {
                    "icon": "font-awesome/fa-eye",
                    "label": {
                        "en-US": "Vis shunt på primærside i dsplay"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "DISPLAY_PUMP_PRIME",
                "type": "bool",
                "value": "false",
                "ui": {
                    "icon": "font-awesome/fa-eye",
                    "label": {
                        "en-US": "Vis startsignal på primærside i dsplay"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "ENABLE",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "en-US": "Aktivert automatisk etter programmering"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "SIDE",
                "type": "str",
                "value": "SECONDARY",
                "ui": {
                    "label": {
                        "en-US": "Styre på"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Primærside"
                                },
                                "v": "PRIMARY"
                            },
                            {
                                "l": {
                                    "en-US": "Sekundærside"
                                },
                                "v": "SECONDARY"
                            }
                        ]
                    }
                }
            },
            {
                "name": "DRIFTSTEMPERATUR",
                "type": "num",
                "value": "35",
                "ui": {
                    "label": {
                        "en-US": "Ønsket driftstemperatur (Tur)"
                    }
                }
            },
            {
                "name": "DRIFTSTEMPERATUR_RETUR",
                "type": "num",
                "value": "35",
                "ui": {
                    "label": {
                        "en-US": "Øvre grense retur"
                    }
                }
            },
            {
                "name": "GROUND_START",
                "type": "num",
                "value": "2",
                "ui": {
                    "label": {
                        "en-US": "Starter ved temp overflate under:"
                    }
                }
            },
            {
                "name": "T25_MAX",
                "type": "num",
                "value": "50",
                "ui": {
                    "label": {
                        "en-US": "Temperaturvakt T25"
                    }
                }
            },
            {
                "name": "AIR_START",
                "type": "num",
                "value": "5",
                "ui": {
                    "label": {
                        "en-US": "Starter ved temp luft under:"
                    }
                }
            },
            {
                "name": "AIR_STOP_MAX",
                "type": "num",
                "value": "10",
                "ui": {
                    "label": {
                        "en-US": "Stenger ned ved luft over"
                    },
                    "type": "spinner"
                }
            },
            {
                "name": "AIR_STOP_MIN",
                "type": "num",
                "value": "-25",
                "ui": {
                    "label": {
                        "en-US": "Stenger ned ved luft under"
                    },
                    "type": "spinner"
                }
            },
            {
                "name": "GROUND_SETPOINT_SNOW",
                "type": "num",
                "value": "3",
                "ui": {
                    "label": {
                        "en-US": "Settpunkt overflate (Snø)"
                    }
                }
            },
            {
                "name": "STANDBY",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Automatisk Standby (grunnvarme i overflate) etter programmering"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "GROUND_SETPOINT_STANDBY",
                "type": "num",
                "value": "1",
                "ui": {
                    "label": {
                        "en-US": "Settpunkt overflate (Standby)"
                    }
                }
            },
            {
                "name": "GROUND_SETPOINT_DRYUP_HIGH",
                "type": "num",
                "value": "3.5",
                "ui": {
                    "label": {
                        "en-US": "Opptørk Settpunkt overflate (Høy)"
                    }
                }
            },
            {
                "name": "GROUND_SETPOINT_DRYUP_LOW",
                "type": "num",
                "value": "2.5",
                "ui": {
                    "label": {
                        "en-US": "Opptørk Settpunkt overflate (Lav)"
                    }
                }
            },
            {
                "name": "DRYUP_COUNTER_MAX",
                "type": "num",
                "value": "2",
                "ui": {
                    "label": {
                        "en-US": "Antall sykluser opptørk"
                    }
                }
            },
            {
                "name": "GROUND_SETPOINT_FROST",
                "type": "num",
                "value": "0.2",
                "ui": {
                    "label": {
                        "en-US": "Settpunkt overflate (Rim) = Luft +"
                    }
                }
            },
            {
                "name": "GROUND_SETPOINT_SNOW_PROB",
                "type": "num",
                "value": "2",
                "ui": {
                    "label": {
                        "en-US": "Settpunkt overflate (Snø sannsynlig)"
                    }
                }
            },
            {
                "name": "TIMEOUT_DRYUP",
                "type": "num",
                "value": "8",
                "ui": {
                    "label": {
                        "en-US": "Timeout opptørk (timer)"
                    }
                }
            },
            {
                "name": "TIMEOUT_FROST",
                "type": "num",
                "value": "6",
                "ui": {
                    "label": {
                        "en-US": "Timeout rim (timer)"
                    }
                }
            },
            {
                "name": "TIMEOUT_SNOW_PROB",
                "type": "num",
                "value": "6",
                "ui": {
                    "label": {
                        "en-US": "Timeout snø sannsynlig (timer)"
                    }
                }
            },
            {
                "name": "FROSTSIKRING_BAKKE_AKTIV",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "en-US": "Frostsikring mellom rør"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "FROSTSIKRING_BAKKE",
                "type": "num",
                "value": "-20",
                "ui": {
                    "label": {
                        "en-US": "Settpunkt Frostsikring Mellom Rør"
                    }
                }
            },
            {
                "name": "PUMP_DELAY",
                "type": "num",
                "value": "0",
                "ui": {
                    "label": {
                        "en-US": "Tid mellom pumpe 1 og 2 under oppstart (minutter)"
                    }
                }
            },
            {
                "name": "START_DELAY",
                "type": "num",
                "value": "0",
                "ui": {
                    "label": {
                        "en-US": "Tid mellom pumpe 2 og regulering oppstart (minutter)"
                    }
                }
            },
            {
                "name": "VALVE_START",
                "type": "num",
                "value": "20",
                "ui": {
                    "label": {
                        "en-US": "Oppstartsposisjon shunt sekundær"
                    },
                    "type": "spinner"
                }
            },
            {
                "name": "SHUNT_MAX_START",
                "type": "num",
                "value": "75",
                "ui": {
                    "label": {
                        "en-US": "Max pådrag under oppstart (%)"
                    },
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 100
                    }
                }
            },
            {
                "name": "STARTUP_TIMEOUT",
                "type": "num",
                "value": "60",
                "ui": {
                    "label": {
                        "en-US": "Timeout oppstartsekvens (minutter)"
                    }
                }
            },
            {
                "name": "SHUNT_MAX",
                "type": "num",
                "value": "100",
                "ui": {
                    "label": {
                        "en-US": "Max pådrag under normal drift (%)"
                    },
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 100
                    }
                }
            },
            {
                "name": "SHUNT_MIN",
                "type": "num",
                "value": "0",
                "ui": {
                    "label": {
                        "en-US": "Minimum pådrag shunt sekundær under drift (%)"
                    },
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 100
                    }
                }
            },
            {
                "name": "P_RETUR",
                "type": "num",
                "value": "0.2025",
                "ui": {
                    "type": "hide"
                }
            },
            {
                "name": "I_RETUR",
                "type": "num",
                "value": "144",
                "ui": {
                    "type": "hide"
                }
            },
            {
                "name": "D_RETUR",
                "type": "num",
                "value": "0",
                "ui": {
                    "type": "hide"
                }
            },
            {
                "name": "P_TUR",
                "type": "num",
                "value": "0.2025",
                "ui": {
                    "type": "hide"
                }
            },
            {
                "name": "I_TUR",
                "type": "num",
                "value": "144",
                "ui": {
                    "type": "hide"
                }
            },
            {
                "name": "D_TUR",
                "type": "num",
                "value": "0",
                "ui": {
                    "type": "hide"
                }
            },
            {
                "name": "T24_FROST",
                "type": "num",
                "value": "6",
                "ui": {
                    "label": {
                        "en-US": "Frostsikring (T24)"
                    },
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 40
                    }
                }
            },
            {
                "name": "T26_START",
                "type": "num",
                "value": "15",
                "ui": {
                    "type": "hide"
                }
            },
            {
                "name": "TIMER_RAISE_SETPOINT",
                "type": "num",
                "value": "2",
                "ui": {
                    "label": {
                        "en-US": "Begrensning, minutter per grad under oppstart."
                    },
                    "type": "spinner"
                }
            },
            {
                "name": "KLARSIGNAL",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Vente på klarsignal?"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "POWER_CONTROL",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Styring på effekt"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "MAX_POWER_START",
                "type": "num",
                "value": "1000",
                "ui": {
                    "label": {
                        "en-US": "Maks tillatt effekt (kW) ved oppstart"
                    }
                }
            },
            {
                "name": "POWER_TOTAL",
                "type": "num",
                "value": "2000",
                "ui": {
                    "label": {
                        "en-US": "Totalt tilgjenegelig effekt (kW)"
                    },
                    "type": "spinner"
                }
            },
            {
                "name": "MAX_POWER",
                "type": "num",
                "value": "1000",
                "ui": {
                    "label": {
                        "en-US": "Maks tillatt effekt (kW) ved opphold"
                    },
                    "type": "spinner"
                }
            },
            {
                "name": "MAX_POWER_SNOW",
                "type": "num",
                "value": "2000",
                "ui": {
                    "label": {
                        "en-US": "Maks tillatt effekt (kW) ved detektert snø"
                    },
                    "type": "spinner"
                }
            },
            {
                "name": "PID_CONFIG",
                "type": "json",
                "value": "{\"T24\":{\"setpoint\":6,\"prop_band\":-6,\"t_integral\":999999999999999,\"t_derivative\":0,\"integral_default\":0,\"smooth_factor\":3,\"max_interval\":600},\"T25\":{\"setpoint\":40,\"prop_band\":40,\"t_integral\":5000,\"t_derivative\":0,\"integral_default\":0,\"smooth_factor\":3,\"max_interval\":600},\"T26\":{\"setpoint\":40,\"prop_band\":20,\"t_integral\":14400,\"t_derivative\":0,\"integral_default\":0,\"smooth_factor\":3,\"max_interval\":600},\"POWER\":{\"setpoint\":1000,\"prop_band\":20,\"t_integral\":60,\"t_derivative\":0,\"integral_default\":0,\"smooth_factor\":3,\"max_interval\":600},\"T_GROUND\":{\"setpoint\":3,\"prop_band\":20,\"t_integral\":14400,\"t_derivative\":0,\"integral_default\":0,\"smooth_factor\":3,\"max_interval\":600}}"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 1080,
            "y": 460,
            "wires": [
                {
                    "id": "13016693f015cf7d",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "14b9c3e701b5e33c",
        "type": "mqtt out",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e649abf8.0e7988",
        "x": 2650,
        "y": 1080,
        "wires": []
    },
    {
        "id": "3093b912c79e049c",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "context",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "state",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 200,
        "wires": [
            [
                "017343e4d179fae5",
                "795acbfe57676d37",
                "9f12422fa7540eb7",
                "c40976724d399fe1",
                "a1517e3c54518db3",
                "db9d049408f6618c",
                "b0697414156d995b",
                "e499822be82b1a59",
                "fdd6392e821ef7e0",
                "2a7c68108906aa32",
                "f6970a5ba4f8f80a",
                "d50abce8c7fd55d4",
                "c56474c9ee321cc3"
            ],
            [
                "a1b7cb6808f63c44",
                "63fed62312b1a17c"
            ]
        ]
    },
    {
        "id": "d5ae2ed5a42242e6",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "APP_STATE",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 415,
        "wires": [
            [
                "d40191b63082f39d"
            ]
        ]
    },
    {
        "id": "5cc0d7c15a5b4185",
        "type": "json",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1130,
        "y": 820,
        "wires": [
            [
                "bcbf235e911bde56"
            ]
        ]
    },
    {
        "id": "d101aed4e90c3470",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "Set Status",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.state",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 320,
        "wires": [
            [
                "983366c576fb9cb1",
                "24b78b54e58cfbef"
            ]
        ]
    },
    {
        "id": "017343e4d179fae5",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "Valve",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.valve",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "a1b7cb6808f63c44",
        "type": "rbe",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "d101aed4e90c3470",
                "a15179235b21a138"
            ]
        ]
    },
    {
        "id": "a15179235b21a138",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "Changed?",
        "property": "payload.changed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 440,
        "wires": [
            [
                "d5ae2ed5a42242e6"
            ]
        ]
    },
    {
        "id": "13016693f015cf7d",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "function 8",
        "func": "msg.payload = flow.get(\"SD_ID\") + \" \" + msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "0b89a5e9931a8ca8",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "INIT",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 580,
        "wires": [
            [
                "d7917a909b459ed6",
                "68d2b529f1e6183c",
                "83917713c13b75fb"
            ]
        ]
    },
    {
        "id": "883915b12aecbc6e",
        "type": "json",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 850,
        "y": 380,
        "wires": [
            [
                "13016693f015cf7d"
            ]
        ]
    },
    {
        "id": "983366c576fb9cb1",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            },
            {
                "t": "istype",
                "v": "object",
                "vt": "object"
            },
            {
                "t": "istype",
                "v": "json",
                "vt": "json"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 710,
        "y": 320,
        "wires": [
            [
                "13016693f015cf7d"
            ],
            [
                "883915b12aecbc6e"
            ],
            [
                "13016693f015cf7d"
            ]
        ]
    },
    {
        "id": "68d2b529f1e6183c",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "reset",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 600,
        "wires": [
            [
                "4db0edd3a96d8466"
            ]
        ]
    },
    {
        "id": "f89d0f65fa662ccf",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "CRITICAL",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 84,
        "y": 274,
        "wires": [
            [
                "4db0edd3a96d8466"
            ]
        ]
    },
    {
        "id": "2f03f61262c880d1",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "GLOBAL GROUND",
        "func": "if(msg.topic === \"T_GROUND\") {\n    if(Number(msg.payload) != 327.67) {\n        let g = global.get(\"GROUND\");\n        if(g === undefined)\n            global.set(\"GROUND\", Number(msg.payload));\n        else if (g > Number(msg.payload))\n            global.set(\"GROUND\", Number(msg.payload));\n    }    \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set(\"GROUND\",undefined);",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed",
        "libs": [],
        "x": 250,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "a8b3f77d7a3729dd",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "",
        "qos": "2",
        "datatype": "json",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 930,
        "y": 800,
        "wires": [
            [
                "af56deab57c6872a"
            ]
        ]
    },
    {
        "id": "296300b9644c9f1b",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "MQTT Setup",
        "func": "msg.action = 'subscribe';\nlet id = flow.get(\"SD_ID\");\nmsg.topic = [];\nfor (let i = 1; i <= 32; i++) {\n    msg.topic.push(\"sd/update/\" + (id * 100 + i));\n    msg.topic.push(\"modbus/update/\" + (id * 100 + i));\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nconst reg = new Array(35).fill(0);\nflow.set(\"REG\", reg,'memoryOnly');",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 740,
        "wires": [
            [
                "a8b3f77d7a3729dd"
            ]
        ]
    },
    {
        "id": "3b5938eff3f32d66",
        "type": "inject",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 690,
        "y": 660,
        "wires": [
            [
                "296300b9644c9f1b"
            ]
        ]
    },
    {
        "id": "6a9edee829b03de9",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "Changed external",
        "func": "let id = flow.get(\"SD_ID\");\nmsg.payload = Number(msg.payload);\nvar r = 0;\nif (msg.topic === \"sd/update/\" + (id * 100 + 1)) {\n    r = 1;\n    msg.topic = 'TOTAL';\n}\nelse if (msg.topic === \"sd/update/\" + (id * 100 + 3)) {\n    if (msg.payload === 1 || msg.payload === 2) {\n        msg.topic = 'MAN';\n    }\n    r = 3;\n}\nelse if (msg.topic === \"sd/update/\" + (id * 100 + 5)) {\n    msg.topic = \"START\";\n    r = 5;\n}\nelse if (msg.topic === \"sd/update/\" + (id * 100 + 16)) {\n    if (msg.payload === 2) {\n        msg.payload = flow.get(\"SD_ID\");\n        msg.topic = 'reset';\n    }\n    r = 16;\n}\nelse if (msg.topic === \"sd/update/\" + (id * 100 + 17)) {\n    if (msg.payload === 0)\n        msg.topic = 'ALARM_RST';\n    r = 17;\n}\nelse if (msg.topic === \"sd/update/\" + (id * 100 + 26)) {\n    msg.topic = 'GROUND_SETPOINT_STANDBY';\n    r = 26;\n}\nelse if (msg.topic === \"sd/update/\" + (id * 100 + 27)) {\n    msg.topic = 'STANDBY';    \n    r = 27;\n}\nif(r != 0) {\n    let reg = flow.get('REG', 'memoryOnly');\n    reg[r] = msg.payload;\n    flow.set('REG', reg, 'memoryOnly');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 880,
        "wires": [
            [
                "1885e652765fd4f2"
            ]
        ]
    },
    {
        "id": "63fed62312b1a17c",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "type",
                "pt": "msg",
                "to": "ground_singel",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.context['reg']",
                "pt": "msg",
                "to": "#:(memoryOnly)::REG",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload.context['logg']",
                "pt": "msg",
                "to": "PipesSingleSoneLOGG",
                "tot": "flow",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1500,
        "y": 360,
        "wires": [
            [
                "ff28278bf83ecc00"
            ]
        ]
    },
    {
        "id": "ff28278bf83ecc00",
        "type": "uib-sender",
        "z": "d76e8ee33ccc284d",
        "url": "user",
        "name": "",
        "topic": "",
        "passthrough": false,
        "return": false,
        "outputs": 0,
        "x": 1810,
        "y": 360,
        "wires": []
    },
    {
        "id": "9f12422fa7540eb7",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "pump1",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.pump1",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "795acbfe57676d37",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "pump2",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.pump2",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6db26a7d014f1855",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "Valve prime",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.valve_prime",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 120,
        "wires": [
            [
                "b4787226e8081465"
            ]
        ]
    },
    {
        "id": "6ae314ccefc4c0c7",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "reset",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 720,
        "wires": [
            [
                "32d8d0d73b0aa2be"
            ]
        ]
    },
    {
        "id": "32d8d0d73b0aa2be",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SD_ID",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 680,
        "wires": [
            [
                "d7917a909b459ed6",
                "4db0edd3a96d8466"
            ]
        ]
    },
    {
        "id": "e42614230bb635ac",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "READY_FOR_CONTENT",
        "qos": "2",
        "datatype": "auto",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 780,
        "wires": [
            [
                "4db0edd3a96d8466",
                "e023b16cf61405ff"
            ]
        ]
    },
    {
        "id": "9f3908525e467095",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "refresh",
        "func": "msg['_uib'] = {\n    \"reload\": true\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 480,
        "wires": [
            [
                "ff28278bf83ecc00"
            ]
        ]
    },
    {
        "id": "940dd4142ddbad24",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "MAN",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 860,
        "wires": [
            [
                "5ef48f5efaf18e5a"
            ]
        ]
    },
    {
        "id": "5ef48f5efaf18e5a",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "payload.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SD_ID",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 860,
        "wires": [
            [
                "56233a646ef10e92"
            ]
        ]
    },
    {
        "id": "56233a646ef10e92",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.val",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 860,
        "wires": [
            [
                "46722b558bc056eb"
            ]
        ]
    },
    {
        "id": "2e6ffbd8c8f969e4",
        "type": "link in",
        "z": "d76e8ee33ccc284d",
        "name": "link in 3",
        "links": [
            "46722b558bc056eb",
            "f2b5dd8483ab6c91",
            "555c9f0e9bafaaa4",
            "b4554419ede3fe23",
            "be657fe929954180"
        ],
        "x": 265,
        "y": 100,
        "wires": [
            [
                "4db0edd3a96d8466"
            ]
        ]
    },
    {
        "id": "46722b558bc056eb",
        "type": "link out",
        "z": "d76e8ee33ccc284d",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "2e6ffbd8c8f969e4",
            "f987f442a13401f3"
        ],
        "x": 665,
        "y": 860,
        "wires": []
    },
    {
        "id": "fed0fd447517d996",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "VALVE",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 960,
        "wires": [
            [
                "5ef48f5efaf18e5a"
            ]
        ]
    },
    {
        "id": "0acea02ff5d66f39",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "VALVE_PRIME",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 1060,
        "wires": [
            [
                "5ef48f5efaf18e5a"
            ]
        ]
    },
    {
        "id": "cce7da7c03190847",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "PUMP",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 148,
        "y": 1109,
        "wires": [
            [
                "41ccf9196d1f5a25"
            ]
        ]
    },
    {
        "id": "41ccf9196d1f5a25",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "payload.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SD_ID",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 1120,
        "wires": [
            [
                "0315dd3f95f41a41"
            ]
        ]
    },
    {
        "id": "0315dd3f95f41a41",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "payload.side",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "primær",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sekundær",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 1120,
        "wires": [
            [
                "cf1fcd89ac25ec85"
            ],
            [
                "b1e357b289bdaebd"
            ]
        ]
    },
    {
        "id": "cf1fcd89ac25ec85",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "PUMP1",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "PUMP1",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.val",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 1100,
        "wires": [
            [
                "46722b558bc056eb"
            ]
        ]
    },
    {
        "id": "b1e357b289bdaebd",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "PUMP2",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "PUMP2",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.val",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 626,
        "y": 1148,
        "wires": [
            [
                "46722b558bc056eb"
            ]
        ]
    },
    {
        "id": "5cc092972d7c5ed3",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "SHUTDOWN",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 640,
        "wires": [
            [
                "32d8d0d73b0aa2be"
            ]
        ]
    },
    {
        "id": "a56bf958ef43e5f8",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "TIMED",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 1200,
        "wires": [
            [
                "ace3b8bbffb2f9b4"
            ]
        ]
    },
    {
        "id": "3f8ecbb9bba22a65",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "START",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 137,
        "y": 1243,
        "wires": [
            [
                "ace3b8bbffb2f9b4"
            ]
        ]
    },
    {
        "id": "ace3b8bbffb2f9b4",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "payload.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SD_ID",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 1240,
        "wires": [
            [
                "3b2e06c971ce6c5f"
            ]
        ]
    },
    {
        "id": "3b2e06c971ce6c5f",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.val",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 1240,
        "wires": [
            [
                "46722b558bc056eb"
            ]
        ]
    },
    {
        "id": "f2b5dd8483ab6c91",
        "type": "link out",
        "z": "d76e8ee33ccc284d",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "2e6ffbd8c8f969e4"
        ],
        "x": 1655,
        "y": 940,
        "wires": []
    },
    {
        "id": "1885e652765fd4f2",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "MAN",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TOTAL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "START",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reset",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ALARM_RST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "STANDBY",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "GROUND_SETPOINT_STANDBY",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 7,
        "x": 1190,
        "y": 920,
        "wires": [
            [
                "ce349717734fdcf2"
            ],
            [
                "c9f854ca3706c93d"
            ],
            [
                "0dcb2696de4b52b5"
            ],
            [
                "7bc454eecbfd3064"
            ],
            [],
            [
                "47c6092235159741"
            ],
            [
                "1c26848682515c32"
            ]
        ]
    },
    {
        "id": "ce349717734fdcf2",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "function 18",
        "func": "if (msg.payload === 1)\n    msg.payload = false;\nelse if (msg.payload === 2) msg.payload = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 780,
        "wires": [
            [
                "f2b5dd8483ab6c91"
            ]
        ]
    },
    {
        "id": "c9f854ca3706c93d",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SET_DURATION",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 900,
        "wires": [
            [
                "f2b5dd8483ab6c91"
            ]
        ]
    },
    {
        "id": "b4787226e8081465",
        "type": "smooth",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "payload",
        "action": "low",
        "count": "1",
        "round": "1",
        "mult": "single",
        "reduce": false,
        "x": 1620,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "70bef6e8bbccc072",
        "type": "inject",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1050,
        "y": 220,
        "wires": [
            [
                "b4787226e8081465"
            ]
        ]
    },
    {
        "id": "b4554419ede3fe23",
        "type": "link out",
        "z": "d76e8ee33ccc284d",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "2e6ffbd8c8f969e4"
        ],
        "x": 3285,
        "y": 60,
        "wires": []
    },
    {
        "id": "1ada31a8eb77bada",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "PID_VALVE",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3110,
        "y": 340,
        "wires": [
            [
                "b4554419ede3fe23"
            ]
        ]
    },
    {
        "id": "0dcb2696de4b52b5",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "func": "if (msg.payload === 1)\n    msg.topic = \"START\";\nif (msg.payload > 1)\n    msg.topic = \"TIMED\";\nif (msg.payload === 0)\n    msg.topic = \"SHUTDOWN\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1000,
        "wires": [
            [
                "f2b5dd8483ab6c91"
            ]
        ]
    },
    {
        "id": "ae6ceb27c62969f9",
        "type": "rbe",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "4db0edd3a96d8466"
            ]
        ]
    },
    {
        "id": "a6b3316227e207e2",
        "type": "link out",
        "z": "d76e8ee33ccc284d",
        "name": "PID_IN",
        "mode": "link",
        "links": [
            "39b60cb919b52bf4"
        ],
        "x": 455,
        "y": 20,
        "wires": []
    },
    {
        "id": "c40976724d399fe1",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "PID_ENABLE",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.pid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2020,
        "y": 340,
        "wires": [
            [
                "fff19dd7e86b5b1e"
            ]
        ]
    },
    {
        "id": "fff19dd7e86b5b1e",
        "type": "rbe",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 2230,
        "y": 340,
        "wires": [
            [
                "6906821cef4cb9f3"
            ]
        ]
    },
    {
        "id": "7bc454eecbfd3064",
        "type": "mqtt out",
        "z": "d76e8ee33ccc284d",
        "name": "reset",
        "topic": "",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e649abf8.0e7988",
        "x": 1670,
        "y": 820,
        "wires": []
    },
    {
        "id": "a1517e3c54518db3",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "SIDE",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "PRIMARY",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 140,
        "wires": [
            [
                "20abcd483010e996"
            ],
            [
                "6db26a7d014f1855"
            ]
        ]
    },
    {
        "id": "20abcd483010e996",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "Valve",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.valve",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 161,
        "wires": [
            [
                "b4787226e8081465"
            ]
        ]
    },
    {
        "id": "47c6092235159741",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "function 30",
        "func": "if (msg.payload === 1) {\n    //msg.topic = 'STANDBY';\n    msg.payload = false;\n}\nelse if (msg.payload === 2) {\n    //msg.topic = 'STANDBY';\n    msg.payload = true;\n}\nelse msg.payload = false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 1240,
        "wires": [
            [
                "f2b5dd8483ab6c91"
            ]
        ]
    },
    {
        "id": "1c26848682515c32",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "function 31",
        "func": "msg.payload = Number(msg.payload) / 100;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 1240,
        "wires": [
            [
                "f2b5dd8483ab6c91"
            ]
        ]
    },
    {
        "id": "c3538ae0a77366b7",
        "type": "link out",
        "z": "d76e8ee33ccc284d",
        "name": "reset",
        "mode": "link",
        "links": [
            "6cf596db6b0b4b2c",
            "fa89cd55dd1e60dc",
            "5d2e7ef7ec317eab",
            "e49522389a30aaaf",
            "a6402f6089d686c5",
            "a3c1d242357779d3",
            "ba07c257b1224c5c",
            "b849627287c553a4"
        ],
        "x": 1215,
        "y": 640,
        "wires": []
    },
    {
        "id": "a915ba8d974860ef",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "ENABLE",
        "qos": "2",
        "datatype": "json",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 920,
        "wires": [
            [
                "5ef48f5efaf18e5a"
            ]
        ]
    },
    {
        "id": "7cd1d193d6b0d5f8",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "STANDBY",
        "qos": "2",
        "datatype": "json",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 394,
        "y": 1028,
        "wires": [
            [
                "5ef48f5efaf18e5a"
            ]
        ]
    },
    {
        "id": "1c8d57f2bc504563",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "GROUND_SETPOINT_STANDBY",
        "qos": "2",
        "datatype": "json",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 360,
        "y": 1080,
        "wires": [
            [
                "5ef48f5efaf18e5a"
            ]
        ]
    },
    {
        "id": "8b172401aa059e06",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "SETPOINT",
        "qos": "2",
        "datatype": "json",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 419,
        "y": 914,
        "wires": [
            [
                "5ef48f5efaf18e5a"
            ]
        ]
    },
    {
        "id": "d7917a909b459ed6",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "reset",
        "func": "return {reset: true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 600,
        "wires": [
            [
                "c3538ae0a77366b7",
                "9f3908525e467095",
                "b4787226e8081465",
                "fff19dd7e86b5b1e",
                "a1b7cb6808f63c44",
                "ae6ceb27c62969f9",
                "36af64bc4198a40d",
                "6c4033a86efc0d16"
            ]
        ]
    },
    {
        "id": "1b4f98a1570fff97",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "LAVENERGY",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 1320,
        "wires": [
            [
                "4e4320780b7ac5da",
                "e29c986defd56cb5"
            ]
        ]
    },
    {
        "id": "4617a8e58ec7c2ca",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "payload.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SD_ID",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 470,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "4e4320780b7ac5da",
        "type": "subflow:79aac880e5f35bdf",
        "z": "d76e8ee33ccc284d",
        "d": true,
        "name": "",
        "x": 430,
        "y": 800,
        "wires": [
            [
                "46722b558bc056eb"
            ]
        ]
    },
    {
        "id": "c71a03adc308117a",
        "type": "inject",
        "z": "d76e8ee33ccc284d",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "SD_ID",
        "payload": "SD_ID",
        "payloadType": "flow",
        "x": 210,
        "y": 820,
        "wires": [
            [
                "4e4320780b7ac5da"
            ]
        ]
    },
    {
        "id": "d909f9ec469f712e",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "function 51",
        "func": "let id = flow.get(\"SD_ID\");\nconsole.log(id + ': ' + msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "24b78b54e58cfbef",
        "type": "json",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 730,
        "y": 20,
        "wires": [
            [
                "36af64bc4198a40d"
            ]
        ]
    },
    {
        "id": "36af64bc4198a40d",
        "type": "rbe",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 890,
        "y": 20,
        "wires": [
            [
                "d909f9ec469f712e"
            ]
        ]
    },
    {
        "id": "db9d049408f6618c",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "pid_setpoint",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.pid_setpoint",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SETPOINT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1990,
        "y": 440,
        "wires": [
            [
                "6c4033a86efc0d16"
            ]
        ]
    },
    {
        "id": "6c4033a86efc0d16",
        "type": "rbe",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 2244,
        "y": 465,
        "wires": [
            [
                "2ca1e22e32565244"
            ]
        ]
    },
    {
        "id": "f987f442a13401f3",
        "type": "link in",
        "z": "d76e8ee33ccc284d",
        "name": "refresh",
        "links": [
            "116e89121bbfb9fc",
            "46722b558bc056eb"
        ],
        "x": 1815,
        "y": 600,
        "wires": [
            [
                "9f3908525e467095"
            ]
        ]
    },
    {
        "id": "079334e4fea418ea",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "Changed Internal",
        "func": "let id = flow.get(\"SD_ID\");\nmsg.payload = Number(msg.payload);\nvar r = 0;\n\nvar index = msg.topic.split('/');\nif(isNaN(Number(index[2])) === false) {\n    r = Number(index[2]) - id * 100;\n    let reg = flow.get('REG', 'memoryOnly');\n    reg[r] = msg.payload;\n    flow.set('REG', reg, 'memoryOnly');\n\n}  \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "5d2e7ef7ec317eab",
        "type": "link in",
        "z": "d76e8ee33ccc284d",
        "name": "link in 9",
        "links": [
            "c3538ae0a77366b7"
        ],
        "x": 2165,
        "y": 620,
        "wires": [
            [
                "6d01c9f4a2c998d2",
                "313e3b19f79dce85",
                "2f28ea49a4710455",
                "f8ae3ca39bada98d",
                "607b9ba48b10571b"
            ]
        ]
    },
    {
        "id": "dd4e1e2e9f9855b8",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "SETPOINT_RETUR",
        "qos": "2",
        "datatype": "json",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 516,
        "y": 957,
        "wires": [
            [
                "5ef48f5efaf18e5a"
            ]
        ]
    },
    {
        "id": "b0697414156d995b",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "setpoint_retur",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.setpoint_retur",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SETPOINT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2000,
        "y": 540,
        "wires": [
            [
                "6d01c9f4a2c998d2"
            ]
        ]
    },
    {
        "id": "6d01c9f4a2c998d2",
        "type": "rbe",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 2230,
        "y": 540,
        "wires": [
            [
                "2163a15d83ae2a83"
            ]
        ]
    },
    {
        "id": "4db0edd3a96d8466",
        "type": "awstm",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "test": "",
        "simclock": false,
        "machine": "single",
        "xstateDefinition": "// Available variables/objects/functions:\n// xstate\n// - .Machine\n// - .interpret\n// - .assign\n// - .send\n// - .sendParent\n// - .spawn\n// - .raise\n// - .actions\n//\n// Common\n// - setInterval, setTimeout, clearInterval, clearTimeout\n// - node.send, node.warn, node.log, node.error\n// - context.get, context.set\n// - flow.get, flow.set\n// - env.get\n// - util\n\nconst { assign, Machine, spawn, sendParent, send, actions } = xstate;\nconst { raise } = actions;\nif (global.get(\"SD_ID\") === undefined) global.set(\"SD_ID\", { latest: 1 });\n\nconst coolingMachine = Machine({\n  id: 'cooler',\n  initial: 'cooling',\n  context: {\n    valve: 0, // default\n    valve_min: 0,\n    duration: 1,\n    startup: true\n  },\n  states: {\n    cooling: {\n      on: {\n        '*': { target: 'finished', cond: (ctx, evt) => ctx.valve <= ctx.valve_min, actions: assign({ valve: (ctx, evt) => ctx.valve_min }) },\n      },\n      entry: assign({ valve: (ctx, evt) => ctx.valve - 0.17 }),\n      //entry: ()=> node.send({ topic: 'PONG'}),\n      exit: sendParent((context, event) => ({\n        //...context,\n        payload: context.valve,\n        type: 'valve'\n      })),\n\n      after: {\n        1000: { target: 'cooling' }\n      }\n    },\n    finished: {}\n  },\n});\n\nif (Boolean(env.get('KLARSIGNAL')) === true)\n  flow.set('KLARSIGNAL', false);\nelse flow.set('KLARSIGNAL', true);\n\nif (flow.get(\"TOTAL_DURATION\") === undefined)\n  flow.set(\"TOTAL_DURATION\", 0);\n\nconst runtime = Machine({\n  id: 'runtime',\n  context: {\n    start: Date.now(),\n    now: Date.now(),\n    duration: 0, // minutter\n    total: flow.get(\"TOTAL_DURATION\"),\n    previous: Date.now(),\n  },\n  initial: 'active',\n  states: {\n    active: {\n      entry: [assign({        \n        duration: (ctx, evt) => {\n          //node.send({topic: 'time', payload: ctx});\n          let now = Date.now();\n          if ((now - ctx.start) === 0)\n            return 0;\n          return Math.floor((now - ctx.start) / 1000 / 60);\n        },\n        total: (ctx, evt) => {\n          let passed = Date.now() - ctx.now;//ctx.now is now old\n          if (passed < 0)\n            return ctx.total;\n          let total = flow.get(\"TOTAL_DURATION\") + passed / 1000 / 60 / 60;\n          flow.set(\"TOTAL_DURATION\", total);\n          //node.send({ topic: 'TOTAL_DURATION', payload: total });\n          return total;\n        },\n        previous: (ctx, evt) => ctx.now,\n        now: (ctx, evt) => Date.now(),\n      }),\n      sendParent((context, event) => ({\n        //...context,\n        payload: { total: flow.get(\"TOTAL_DURATION\"), running: context.duration },\n        type: 'TOTAL_DURATION'\n      }))],\n      after: {\n        60000: 'active'\n      }\n\n    }\n  }\n});\n\nif (flow.get(\"SD_ID\") === undefined) {\n  flow.set(\"SD_ID\", global.get(\"SD_ID\").latest);\n  global.set(\"SD_ID\", {\n    ...global.get(\"SD_ID\"),\n    latest: global.get(\"SD_ID\").latest + 1,\n  }, \"file\");\n}\nconst ID = flow.get(\"SD_ID\");\n\n// First define names guards, actions, ...\n\n/**\n * Guards\n */\n\n//TODO TEST\nconst guardHeatON = (ctx, _evt) => {\n  //if (ctx.startup === true)\n  //return true;\n  if (ctx.frostsikring_bakke === true && ctx.between_pipes === \"error\" && ctx.ground < ctx.between_pipes_setpoint)\n    return true;\n  if ((ctx.ground === undefined || ctx.ground === \"error\") && ctx.ignore_ground === false)\n    return false;\n  if (ctx.frostsikring_bakke === true && ctx.between_pipes < ctx.between_pipes_setpoint)\n    return true;\n  if (ctx.standby === true) {\n    if ((ctx.ignore_ground === false && ctx.ground < ctx.standby_ground_setpoint) || (ctx.ignore_ground === true && global.get(\"GROUND\") != undefined && global.get(\"GROUND\") < ctx.standby_ground_setpoint))\n      return true;\n  }\n  if (ctx.ignore_ground === false && ctx.ground < ctx.ground_setpoint)\n    return true;\n  if (ctx.ignore_ground === true && global.get(\"GROUND\") != undefined && global.get(\"GROUND\") < ctx.ground_setpoint)\n    return true;\n  else return false;\n};\n\n//TODO TEST\nconst guardHeatOFF = (ctx, _evt) => {\n  if (ctx.ignore_ground === false && (ctx.ground === undefined || ctx.ground === \"error\"))\n    return true;\n  if (ctx.standby === true) {\n    if ((ctx.ignore_ground === false && ctx.ground > ctx.standby_ground_setpoint) || (ctx.ignore_ground === true && global.get(\"GROUND\") != undefined && global.get(\"GROUND\") > ctx.standby_ground_setpoint))\n      return true;\n  }\n  if (ctx.ignore_ground === false && ctx.ground > ctx.ground_setpoint)\n    return true;\n  if (ctx.ignore_ground === true && global.get(\"GROUND\") != undefined && global.get(\"GROUND\") > ctx.ground_setpoint)\n    return true;\n  else return false;\n};\n\nconst guardStart = (ctx, _evt) => {\n  if (ctx.T24 === undefined || ctx.T25 === undefined)\n    return false;\n  if (ctx.frostsikring_bakke === true && ctx.between_pipes === \"error\" && ctx.ground < -10)\n    return true;\n  if (ctx.ground === undefined || ctx.air === undefined || ctx.ground === \"error\" || (ctx.air === \"error\" && ctx.ignore_air === false))\n    return false;\n  if (ctx.standby && ctx.air < ctx.air_stop_max && ctx.air > ctx.air_stop_min) //standby\n    return true;\n  if (ctx.frostsikring_bakke === true && ctx.between_pipes != undefined && ctx.between_pipes < ctx.between_pipes_setpoint)\n    return true;\n  if (ctx.timed > 0) //\n    return true;\n  if (ctx.air >= ctx.air_stop_max || ctx.air <= ctx.air_stop_min)\n    return false;\n  if ((ctx.snow || ctx.frost || ctx.snow_prob || (ctx.last_enable && ctx.last >= ctx.last_start)) && ((ctx.ignore_ground === false && ctx.ground < ctx.ground_start) || (ctx.ignore_ground === true && global.get(\"GROUND\") != undefined && global.get(\"GROUND\") < ctx.ground_start)) && (ctx.air < ctx.air_start || ctx.ignore_air === true))//startup\n    return true;\n  else return false;\n};\n\nconst guardStop = (ctx, evt) => {\n  //if true, log criteria air air_stop_max air_stop_min timed\n  if((ctx.air >= ctx.air_stop_max || ctx.air <= ctx.air_stop_min) && ctx.timed < 1)\n    console.log(\"Stop criteria: air: \" + ctx.air + \" air_stop_max: \" + ctx.air_stop_max + \" air_stop_min: \" + ctx.air_stop_min + \" timed: \" + ctx.timed);\n  return (ctx.air >= ctx.air_stop_max || ctx.air <= ctx.air_stop_min) && ctx.timed < 1;\n  //return false;\n}\n\n/**\n * Actions\n */\n\nconst setValvePID = assign({\n  valve: (ctx, evt) => {\n    if (evt.payload <= ctx.valve_min)\n      return ctx.valve_min;\n    else return evt.payload;\n  }\n});\n\nconst setValve = assign({\n  valve: (context, event) => {\n    console.log(\"Setting valve: \" + event.payload);\n    // If the payload is greater than 100, return 100.\n    if (event.payload > 100)\n      return 100;\n    // If the payload is less than 0, return 0.\n    if (event.payload < 0)\n      return 0;\n    // Otherwise, return the payload.\n    else return event.payload;\n  }\n});\n\n//const allowed_delta = 1 / 60;\n\nif (flow.get(\"ENV_DRIFTSTEMPERATUR\") != undefined)\n  if (flow.get(\"ENV_DRIFTSTEMPERATUR\") != env.get(\"DRIFTSTEMPERATUR\"))\n    flow.set(\"SETPOINT\", env.get(\"DRIFTSTEMPERATUR\"));\n\nif (flow.get(\"ENV_DRIFTSTEMPERATUR_RETUR\") != undefined)\n  if (flow.get(\"ENV_DRIFTSTEMPERATUR_RETUR\") != env.get(\"DRIFTSTEMPERATUR_RETUR\"))\n    flow.set(\"SETPOINT_RETUR\", env.get(\"DRIFTSTEMPERATUR_RETUR\"));\n\nif (flow.get(\"ENV_GROUND_SETPOINT_STANDBY\") != undefined)\n  if (flow.get(\"ENV_GROUND_SETPOINT_STANDBY\") != env.get(\"GROUND_SETPOINT_STANDBY\"))\n    flow.set(\"GROUND_SETPOINT_STANDBY\", env.get(\"GROUND_SETPOINT_STANDBY\"));\n\nif (flow.get(\"ENV_STANDBY\") != undefined)\n  if (flow.get(\"ENV_STANDBY\") != env.get(\"STANDBY\"))\n    flow.set(\"STANDBY\", env.get(\"STANDBY\"));\n\nif (flow.get(\"SETPOINT\") === undefined)\n  flow.set(\"SETPOINT\", env.get(\"DRIFTSTEMPERATUR\"));\n\nif (flow.get(\"SETPOINT_RETUR\") === undefined)\n  flow.set(\"SETPOINT_RETUR\", env.get(\"DRIFTSTEMPERATUR_RETUR\"));\n\nif (flow.get(\"GROUND_SETPOINT_STANDBY\") === undefined)\n  flow.set(\"GROUND_SETPOINT_STANDBY\", env.get(\"GROUND_SETPOINT_STANDBY\"));\n\nif (flow.get(\"STANDBY\") === undefined)\n  flow.set(\"STANDBY\", env.get(\"STANDBY\"));\n\n//flow.set(\"ENABLE\", env.get(\"ENABLE\"));\n\nif (flow.get(\"ENABLE\") === undefined)\n  flow.set(\"ENABLE\", env.get(\"ENABLE\"));\n\nif (flow.get(\"MAX_POWER\") === undefined)\n  flow.set(\"MAX_POWER\", env.get(\"MAX_POWER\"));\n\nif (flow.get(\"MAX_POWER_SNOW\") === undefined)\n  flow.set(\"MAX_POWER_SNOW\", env.get(\"MAX_POWER_SNOW\"));\n\nif (flow.get(\"POWER_CONTROL\") === undefined)\n  flow.set(\"POWER_CONTROL\", env.get(\"POWER_CONTROL\"));\n//set PRESSURE_LIMIT\nif (flow.get(\"PRESSURE_LIMIT\") === undefined)\n  flow.set(\"PRESSURE_LIMIT\", 0.9);\n\n\n//Old ENV\nflow.set(\"ENV_GROUND_SETPOINT_STANDBY\", env.get(\"GROUND_SETPOINT_STANDBY\"));\nflow.set(\"ENV_DRIFTSTEMPERATUR\", env.get(\"DRIFTSTEMPERATUR\"));\nflow.set(\"ENV_DRIFTSTEMPERATUR_RETUR\", env.get(\"DRIFTSTEMPERATUR_RETUR\"));\nflow.set(\"ENV_STANDBY\", env.get(\"STANDBY\"));\n\n//LAST_START\nif (flow.get(\"LAST_START\") === undefined)\n  flow.set(\"LAST_START\", 100);\n\n//LAST_STOP\nif (flow.get(\"LAST_STOP\") === undefined)\n  flow.set(\"LAST_STOP\", 0);\n//LAST_ENABLE\nif (flow.get(\"LAST_ENABLE\") === undefined)\n  flow.set(\"LAST_ENABLE\", false);\n\nconst setEnable = assign({\n  enabled: (context, event) => {\n    flow.set(\"ENABLE\", event.payload);\n    return event.payload;\n  }\n});\n\nconst setTIMEOUT_DRYUP = assign({\n  TIMEOUT_DRYUP: (context, event) => event.payload\n});\nconst setTIMEOUT_FROST = assign({\n  TIMEOUT_FROST: (context, event) => event.payload\n});\nconst setTIMEOUT_SNOW_PROB = assign({\n  TIMEOUT_SNOW_PROB: (context, event) => event.payload\n});\n\nconst setGROUND_SETPOINT_SNOW = assign({\n  ground_setpoint: (context, event) => event.payload\n});\n\nconst setSETPOINT = assign({\n  setpoint: (context, event) => {\n    flow.set(\"SETPOINT\", Number(event.payload));\n    return Number(event.payload)\n  }\n});\nconst setSETPOINT_RETUR = assign({\n  setpoint_retur: (context, event) => {\n    flow.set(\"SETPOINT_RETUR\", Number(event.payload));\n    return Number(event.payload)\n  }\n});\n\nconst setSTANDBY = assign({\n  standby: (context, event) => {\n    flow.set(\"STANDBY\", event.payload);\n    return event.payload;\n  }\n});\n\nconst setAIR_START = assign({\n  air_start: (_context, event) => event.payload\n});\n\nconst setGROUND_START = assign({\n  ground_start: (_context, event) => event.payload\n});\n\nconst setGROUND_SETPOINT_STANDBY = assign({\n  standby_ground_setpoint: (_context, event) => {\n    flow.set(\"GROUND_SETPOINT_STANDBY\", Number(event.payload));\n    return Number(event.payload);\n  }\n});\n\nconst setGROUND_SETPOINT_FROST = assign({\n  ground_setpoint_frost: (_context, event) => event.payload\n});\n\nconst setGROUND_SETPOINT_SNOW_PROB = assign({\n  ground_setpoint_snow_prob: (_context, event) => event.payload\n});\n\nconst setFROSTSIKRING_BAKKE = assign({\n  between_pipes_setpoint: (_context, event) => event.payload\n});\n\nconst setSHUNT_MIN = assign({\n  valve_min: (_context, event) => event.payload\n});\n\nconst setMan = assign({\n  manual: (context, event) => event.payload\n});\n\nconst setSnow = assign({\n  snow: (ctx, evt) => {\n    if (ctx.snow_local === true || ctx.snow_api === true || evt.payload === true)\n      return true;\n    else return false;\n  }\n});\n\nconst setSnowProb = assign({\n  snow_prob: (ctx, evt) => {\n    if (ctx.snow_prob_local === true || ctx.snow_prob_api === true || evt.payload === true)\n      return true;\n    else return false;\n  }\n});\n\nconst setFrost = assign({\n  frost: (context, event) => event.payload\n});\n\nconst setT26 = assign({\n  T26: (context, event) => event.payload\n});\n\nconst setT25 = assign({\n  T25: (context, event) => event.payload\n});\n\nconst setGround = assign({\n  ground: (context, event) => event.payload\n});\n\nconst setBetween = assign({\n  between_pipes: (context, event) => event.payload\n});\n\n/**\n * Activities\n */\nif (flow.get(\"T24_FROST\") === undefined)\n  flow.set(\"T24_FROST\", env.get(\"T24_FROST\"));\n\nif (flow.get('LAVENERGY') === undefined)\n  flow.set('LAVENERGY', false);\n\nif (flow.get('ENERGYSAVER') === undefined)\n  flow.set('ENERGYSAVER', {\n    value: 75,\n    fra: '0',\n    til: '5',\n    dager: {\n      mandag: false,\n      tirsdag: false,\n      onsdag: false,\n      torsdag: false,\n      fredag: false,\n      lørdag: false,\n      søndag: false,\n    },  \n    enable: false\n  });\n\n/***************************\n * Main machine definition * \n ***************************/\nreturn {\n  machine: {\n    id: 'parent',\n    context: {\n      ID: ID,\n      type: 'singlezone',\n      side: env.get('SIDE') || 'SECONDARY',\n      klarsignal: flow.get('KLARSIGNAL'),\n      lavenergy: flow.get('LAVENERGY'),\n      energy_saver: flow.get('ENERGYSAVER'),\n      capacity_power: env.get('CAPACITY_POWER'),\n      valve_prime: 0,\n      valve: 0,\n      pump1: false,\n      pump2: false,\n      manual: false,\n      enabled: flow.get(\"ENABLE\"),\n      air: undefined,\n      ground: undefined,\n      T26: undefined,\n      T25: undefined,\n      T24: undefined,\n      snow: false,\n      frost: false,\n      snow_prob: false,\n      lower_limit: Number(env.get(\"SHUNT_MIN\")),\n      upper_limit: 100,\n      setpoint: flow.get(\"SETPOINT\"),\n      setpoint_retur: flow.get(\"SETPOINT_RETUR\"),\n      pid_setpoint: flow.get(\"SETPOINT\"),\n      pid_setpoint_retur: flow.get(\"SETPOINT_RETUR\"),\n      ground_setpoint: env.get(\"GROUND_SETPOINT_SNOW\"),\n      ground_pid_setpoint: env.get(\"GROUND_SETPOINT_SNOW\"),\n      dryup_ground_setpoint_low: env.get(\"GROUND_SETPOINT_DRYUP_LOW\"),\n      dryup_ground_setpoint_high: env.get(\"GROUND_SETPOINT_DRYUP_HIGH\"),\n      air_start: env.get(\"AIR_START\"),\n      ground_start: env.get(\"GROUND_START\"),\n      standby: flow.get(\"STANDBY\"),\n      standby_ground_setpoint: flow.get(\"GROUND_SETPOINT_STANDBY\"),\n      ground_setpoint_frost: env.get(\"GROUND_SETPOINT_FROST\"),\n      ground_setpoint_snow_prob: env.get(\"GROUND_SETPOINT_SNOW_PROB\"),\n      between_pipes: undefined,\n      between_pipes_setpoint: env.get(\"FROSTSIKRING_BAKKE\"),\n      frostsikring_bakke: env.get(\"FROSTSIKRING_BAKKE_AKTIV\"),\n      timed: 0,\n      valve_min: env.get(\"SHUNT_MIN\"),\n      valve_max: env.get(\"SHUNT_MAX\"),\n      valve_max_start: env.get(\"SHUNT_MAX_START\"),\n      valve_max_timer: 100,\n      TIMEOUT_DRYUP: env.get(\"TIMEOUT_DRYUP\"),\n      TIMEOUT_FROST: env.get(\"TIMEOUT_FROST\"),\n      TIMEOUT_SNOW_PROB: env.get(\"TIMEOUT_SNOW_PROB\"),\n      mainzone_id: flow.get(\"MAINZONE_ID\"),\n      error: 0,\n      ignore_air: false,\n      ignore_ground: false,\n      startup: false,\n      valve_start: env.get(\"VALVE_START\"),\n      X: 10,\n      Y: 0.5,\n      pump_delay: env.get(\"PUMP_DELAY\"),\n      start_delay: env.get(\"START_DELAY\"),\n      STARTUP_TIMEOUT: env.get(\"STARTUP_TIMEOUT\"),\n      total_duration: Number(flow.get(\"TOTAL_DURATION\").toFixed(2)),\n      running_duration: 0,\n      reason: 0,\n      pid: false,\n      pid_start: false,\n      label: env.get(\"LABEL\"),\n      p_start: env.get(\"P_RETUR\"),\n      p: env.get(\"P\"),\n      snow_api: false,\n      snow_local: false,\n      snow_prob_api: false,\n      snow_prob_local: false,\n      air_stop_max: env.get(\"AIR_STOP_MAX\"),\n      air_stop_min: env.get(\"AIR_STOP_MIN\"),\n      DISPLAY_VALVE_PRIME: env.get(\"DISPLAY_VALVE_PRIME\"),\n      DISPLAY_PUMP_PRIME: env.get(\"DISPLAY_PUMP_PRIME\"),\n      T25_prev: undefined,\n      T25_prev_time: undefined,\n      T25_delta: undefined,\n      //allowed_delta: allowed_delta,\n      T26_start: env.get(\"T26_START\"),\n      pidstart_setpoint: env.get(\"T26_START\"),\n      TIMER_RAISE_SETPOINT: env.get('TIMER_RAISE_SETPOINT'),\n      air_api: undefined,\n      trykk: {},\n      lowest_pressure: undefined,\n      pressure_limit: flow.get(\"PRESSURE_LIMIT\"),\n      dryup_counter: 0,\n      dryup_counter_max: env.get(\"DRYUP_COUNTER_MAX\"),\n      T25_max: env.get(\"T25_MAX\"),\n      last: undefined,\n      last_start: flow.get(\"LAST_START\"),\n      last_stop: flow.get(\"LAST_STOP\"),\n      last_enable: flow.get(\"LAST_ENABLE\"),\n      T24_frost: flow.get(\"T24_FROST\"),\n      power_setpoint: flow.get('POWER_CONTROL') === true ? flow.get(\"MAX_POWER\") : 100000,\n      power_setpoint_snow: flow.get('POWER_CONTROL') === true ? flow.get(\"MAX_POWER_SNOW\") : 100000,\n      power_pid_setpoint: env.get(\"MAX_POWER_START\"),\n      power_setpoint_start: env.get(\"MAX_POWER_START\"),\n      power_total: env.get(\"POWER_TOTAL\"),\n      power_control: flow.get(\"POWER_CONTROL\"),\n      power: undefined,\n    },\n    initial: 'disabled',\n    on: {\n      POWER: { actions: assign({ power: (ctx, evt) => Number(evt.payload)}) },\n      POWER_SETPOINT: { actions: [(ctx, evt) => flow.set(\"MAX_POWER\", Number(evt.payload)), assign({ power_setpoint: (ctx, evt) => Number(evt.payload) })] },\n      POWER_SETPOINT_SNOW: { actions: [(ctx, evt) => flow.set(\"MAX_POWER_SNOW\", Number(evt.payload)), assign({ power_setpoint_snow: (ctx, evt) => Number(evt.payload) })] },\n      POWER_CONTROL: {actions: [(ctx, evt) => flow.set(\"POWER_CONTROL\", Boolean(evt.payload)), assign({ power_control: (ctx, evt) => Boolean(evt.payload) })]},\n      LAST: { actions: assign({ last: (ctx, evt) => isNaN(Number(evt.payload)) ? ctx.last : Number(evt.payload) }) },\n      LAST_START: { actions: [(ctx,evt)=> flow.set('LAST_START',isNaN(Number(evt.payload)) ? ctx.last_start : Number(evt.payload)),assign({ last_start: (ctx, evt) => isNaN(Number(evt.payload)) ? ctx.last_start : Number(evt.payload) })] },\n      LAST_STOP: { actions: [(ctx,evt)=> flow.set('LAST_STOP',isNaN(Number(evt.payload)) ? ctx.last_stop : Number(evt.payload)),assign({ last_stop: (ctx, evt) => isNaN(Number(evt.payload)) ? ctx.last_stop : Number(evt.payload) })] },\n      LAST_ENABLE: { actions: [(ctx,evt)=> flow.set('LAST_ENABLE',typeof Boolean(evt.payload) === 'boolean' ? Boolean(evt.payload) : ctx.last_enable),assign({ last_enable: (ctx, evt) => typeof Boolean(evt.payload) === 'boolean' ? Boolean(evt.payload) : ctx.last_enable })] },\n      ENABLE: { actions: 'setEnable' },\n      TRYKK: { actions: assign({ \n        lowest_pressure: (ctx, evt) => (typeof evt.payload === 'object' && 'ai' in evt.payload && 'val' in evt.payload && 'label' in evt.payload && (ctx.lowest_pressure === undefined || ctx.lowest_pressure > evt.payload.val)) ? evt.payload.val : ctx.lowest_pressure ,\n        trykk: (ctx, evt) => (typeof evt.payload === 'object' && 'ai' in evt.payload && 'val' in evt.payload && 'label' in evt.payload) ? { ...ctx.trykk, [evt.payload.ai]: evt.payload } : ctx.trykk \n      }) },\n      KLAR: { actions: assign({ klarsignal: (ctx, evt) => Boolean(evt.payload) }) },\n      CRITICAL: 'critical',\n      LAVENERGY: { actions: [(ctx, evt) => flow.set('ENERGYSAVER', evt.payload), assign({ energy_saver: (ctx, evt) => evt.payload })] },\n      PRESSURE_LIMIT: { actions: [(ctx, evt) => flow.set('PRESSURE_LIMIT', Number(evt.payload)), assign({ pressure_limit: (ctx, evt) => evt.payload })] },\n      VALVE_MAX: { actions: assign({ upper_limit:(ctx, evt) => Number(evt.payload)  }) },      \n      T26: { actions: assign({ T26: (ctx, evt) => isNaN(Number(evt.payload)) ? undefined : (Number(evt.payload) === 327.67 ? \"error\" : Number(evt.payload)) }) },\n      T25: {\n        actions: assign({\n          T25: (ctx, evt) => isNaN(Number(evt.payload)) ? undefined : (Number(evt.payload) === 327.67 ? \"error\" : Number(evt.payload)),\n          T25_prev: (ctx, evt) => ctx.T25,\n          T25_prev_time: (ctx, evt) => {\n            return Date.now();\n          },\n          T25_delta: (ctx, evt) => {\n            if (ctx.T25_prev_time === undefined || ctx.T25_prev === undefined)\n              return ctx.T25_delta;\n            return (ctx.T25_prev - ctx.T25) / (Date.now() - ctx.T25_prev_time);\n          }\n        })\n      },\n      T24: { actions: assign({ T24: (ctx, evt) => isNaN(Number(evt.payload)) ? undefined : (Number(evt.payload) === 327.67 ? \"error\" : Number(evt.payload)) }) },\n      T23: { actions: assign({ T23: (ctx, evt) => isNaN(Number(evt.payload)) ? undefined : (Number(evt.payload) === 327.67 ? \"error\" : Number(evt.payload)) }) },\n      T24_FROST: { actions: [(_ctx,evt)=> flow.set(\"T24_FROST\",Number(evt.payload)),assign({ T24_frost: (ctx, evt) => Number(evt.payload) })] },\n      //SNOW: { actions: 'setSnow' },\n      SNOW_API: { actions: [assign({ snow_api: (ctx, evt) => evt.payload }), 'setSnow'] },\n      SNOW_LOCAL: { actions: [assign({ snow_local: (ctx, evt) => evt.payload }), 'setSnow'] },\n      SNOW_PROB_API: { actions: [assign({ snow_prob_api: (ctx, evt) => evt.payload }), 'setSnowProb'] },\n      SNOW_PROB_LOCAL: { actions: [assign({ snow_prob_local: (ctx, evt) => evt.payload }), 'setSnowProb'] },\n      FROST: { actions: 'setFrost' },\n      //SNOW_PROB: { actions: 'setSnowProb' },\n      T_AIR: { actions: assign({ air: (ctx, evt) => evt.payload === 327.67 ? (ctx.air_api === undefined ? \"error\" : ctx.air_api) : evt.payload }) },\n      AIR_TEMPERATURE_API: { actions: assign({ air_api: (ctx, evt) => isNaN(Number(evt.payload.air_temperature)) ? undefined : Number(evt.payload.air_temperature), air: (ctx, evt) => ctx.air === undefined ? (isNaN(Number(evt.payload.air_temperature)) ? undefined : Number(evt.payload.air_temperature)) : ctx.air }) },\n      T_GROUND: { actions: assign({ ground: (ctx, evt) => evt.payload === 327.67 ? \"error\" : Number(evt.payload) }) },\n      BETWEEN_PIPES: { actions: assign({ between_pipes: (ctx, evt) => evt.payload === 327.67 ? \"error\" : Number(evt.payload) }) },\n      GROUND_SETPOINT_SNOW: { actions: 'setGROUND_SETPOINT_SNOW' },\n      SETPOINT: { actions: 'setSETPOINT' },\n      SETPOINT_RETUR: { actions: 'setSETPOINT_RETUR' },\n      AIR_START: { actions: 'setAIR_START' },\n      GROUND_START: { actions: 'setGROUND_START' },\n      STANDBY: { actions: 'setSTANDBY' },\n      GROUND_SETPOINT_STANDBY: { actions: 'setGROUND_SETPOINT_STANDBY' },\n      GROUND_SETPOINT_FROST: { actions: 'setGROUND_SETPOINT_FROST' },\n      GROUND_SETPOINT_SNOW_PROB: { actions: 'setGROUND_SETPOINT_SNOW_PROB' },\n      FROSTSIKRING_BAKKE: { actions: 'setFROSTSIKRING_BAKKE' },\n      SHUNT_MIN: { actions: 'setSHUNT_MIN' },\n      TIMEOUT_DRYUP: { actions: 'setTIMEOUT_DRYUP' },\n      TIMEOUT_FROST: { actions: 'setTIMEOUT_FROST' },\n      TIMEOUT_SNOW_PROB: { actions: 'setTIMEOUT_SNOW_PROB' },\n      VALVE_MAX_TIMER: {actions: assign({ valve_max_timer: (ctx, evt) => evt.payload})},     \n      SET_DURATION: {\n        actions: assign({\n          total_duration: (ctx, evt) => {\n            flow.set(\"TOTAL_DURATION\", evt.payload);\n            return evt.payload;\n          }\n        })\n      }\n      //MAINZONE_ID: { actions: assign({ mainzone_id: 0})}\n    },\n    states: {\n      disabled: {\n        //entry: assign({ valve: 0, pump1: false, pump2: false, valve_prime: 0 }),\n        always: { target: 'enabled', cond: (ctx, evt) => ctx.enabled === true },\n      },\n      enabled: {\n        exit: assign({ valve: 0, pump1: false, pump2: false, valve_prime: 0 }),\n        always: [\n          { target: '#lavt_trykk', cond: (ctx, evt) => ctx.lowest_pressure != undefined && ctx.lowest_pressure <= ctx.pressure_limit && ctx.manual === false,actions: assign({ error: 7 })},\n          { target: '#critical', cond: (ctx, evt) => ctx.T25 === \"error\" && ctx.manual === false, actions: assign({ error: 3 }) },\n          { target: '#critical', cond: (ctx, evt) => ctx.T24 === \"error\" && ctx.manual === false, actions: assign({ error: 2 }) },\n          { target: '#overheat', cond: (ctx, evt) => ctx.T25 >= env.get(\"T25_MAX\") && ctx.manual === false, actions: assign({ error: 1 }) },\n          { target: '#critical', cond: (ctx, evt) => ctx.T24 < 1 && ctx.manual === false, actions: assign({ error: 4 }) },\n          { target: '#ground_error', cond: (ctx, evt) => ctx.ground === \"error\" && ctx.manual === false, actions: assign({ error: 5 }) },\n          { target: '#air_error', cond: (ctx, evt) => ctx.air === \"error\" && ctx.ignore_air === false && ctx.manual === false, actions: assign({ error: 6 }) },\n          { target: 'disabled', cond: (ctx, evt) => ctx.enabled === false && ctx.manual === false },\n        ],\n        //type: 'parallel',\n        initial: 'auto',\n        states: {\n          auto: {\n            always: { target: 'manual', cond: (ctx, evt) => ctx.manual === true },\n            initial: 'off',\n            states: {\n              frost_protection: {\n                entry: assign({ valve: 0, pump2: false, pump_delay: 2, pid: false, pid_start: false, start_delay: (ctx, evt) => 2, valve_start: (ctx, evt) => ctx.valve_start - 1 }),\n                after: {\n                  'FROST_DELAY': {target: 'on'}\n                }\n              },\n              off: {\n                id: 'off',\n                always: { target: 'on', cond: 'guardStart' },\n                entry: assign({\n                  error: 0,\n                  valve: 0, pump1: false, pump2: false, valve_prime: 0, valve_start: (ctx, evt) => {\n                    console.log(ctx.ID + \" Off\");\n                    return env.get(\"VALVE_START\");\n                  }, timed: 0, pid: false, pid_start: false\n                }),\n              },\n              on: {\n                initial: 'startup',\n                exit: assign({ running_duration: 0, valve: 0, pump1: false, pump2: false, valve_prime: 0, valve_start: () => env.get(\"VALVE_START\"), timed: 0, pid: false, pid_start: false }),\n                invoke: {\n                  src: runtime,\n                },\n                entry: assign({\n                  power_pid_setpoint: env.get(\"MAX_POWER_START\"),\n                  valve_prime: 100,\n                  startup: false, reason: (ctx, evt) => {                    \n                    if (ctx.snow_local === true) {\n                      console.log(ctx.ID + \" Oppstart snø lokal\");\n                      return 1;\n                    }\n                    if (ctx.frost === true) {\n                      console.log(ctx.ID + \" Oppstart rim\");\n                      return 2;\n                    }\n                    if (ctx.snow_prob_local === true) {\n                      console.log(ctx.ID + \" Oppstart snø sannsynlig lokal\");\n                      return 3;\n                    }\n                    if (ctx.timed > 1) {\n                      console.log(ctx.ID + \" Oppstart på tid\");\n                      return 4;\n                    }\n                    if (ctx.timed > 0) {\n                      console.log(ctx.ID + \" Oppstart sekvens\");\n                      return 5;\n                    }\n                    if (ctx.standby === true) {\n                      console.log(ctx.ID + \" Oppstart på Standby\");\n                      return 6;\n                    }\n                    if (ctx.snow_api === true) {\n                      console.log(ctx.ID + \" Oppstart snø værdata\");\n                      return 7;\n                    }\n                    if (ctx.snow_prob_api === true) {\n                      console.log(ctx.ID + \" Oppstart snø sannsynlig værdata\");\n                      return 8;\n                    }\n                    if (ctx.last >= ctx.last_start && ctx.last_enable === true) {\n                      console.log(ctx.ID + \" Oppstart på snølast\");\n                      return 9;\n                    }\n                    if(ctx.frostsikring_bakke === true && ctx.between_pipes < ctx.between_pipes_setpoint) {\n                      console.log(ctx.ID + \" Oppstart på frostsikring mellom rør\");\n                      return 10;\n                    }\n                    else return ctx.reason;\n                  }\n                }),\n                always: [\n                  { target: 'frost_protection', cond: (ctx, evt) => ctx.T24 < ctx.T24_frost },\n                ],\n                on: {\n                  SHUTDOWN: { target: '#shutdown', actions: assign({ timed: 0 }) },\n                  TOTAL_DURATION: {\n                    actions: assign({\n                      running_duration: (ctx, evt) => evt.payload.running, total_duration: (ctx, evt) => {\n                        //node.send({topic: 'time', payload: evt.payload});\n                        return Number(evt.payload.total.toFixed(2));\n                      }\n                    })\n                  }\n                },\n                states: {\n                  shutdown: {\n                    id: 'shutdown',\n                    entry: assign({ valve_prime: (ctx, evt) => { console.log(ctx.ID + \": Stenger ned\"); return 0; }, pump1: false, pump2: true, pid: false, pid_start: false }),\n                    always: [\n                      { target: '#after_startup', cond: 'guardStart' },                      \n                      { target: '#off', cond: (ctx, evt) => ctx.valve <= 1 && ctx.T25 < ctx.setpoint }],\n                    invoke: {\n                      src: coolingMachine,\n                      data: {\n                        valve: (context, event) => context.valve,\n                      },\n                    },\n                    on: {\n                      'valve': { actions: assign({ valve: (ctx, evt) => evt.payload <= 0 ? 0 : evt.payload }) }\n                    },\n                  },\n                  startup: {\n                    id: 'startup',\n                    initial: 'venter_klarsignal',\n                    always: { target: '#shutdown', cond: 'guardStop' },\n                    states: {                      \n                      venter_klarsignal: {\n                        always: { target: 'pump_1_start', cond: (ctx, evt) => ctx.klarsignal === true },\n                      },\n                      pump_1_start: {\n                        entry: assign({ pump1: true, pump2: false, pid_start: false, pid: false, valve: 0 }),\n                        after: {\n                          PUMP_DELAY: { target: 'fast_paadrag', actions: assign({ pump2: true,pump1: true }) }\n                          //10000: { target: 'pump_2_start' }\n                        }\n                      },\n                      fast_paadrag: {\n                        id: 'fast_paadrag',\n                        always: { target: '#regulate_startup', cond: (ctx, evt) => ctx.power != undefined && (ctx.power - 100) >= ctx.power_setpoint_start },\n                        entry: assign({ pid: true, lower_limit: (ctx, evt) => Math.min(ctx.valve_start, ctx.valve_max_timer), upper_limit: (ctx, evt) => Math.min(ctx.valve_start, ctx.valve_max_timer) }),\n                        exit: assign({ pid: true, lower_limit: (ctx, evt) => ctx.valve_min, upper_limit: (ctx, evt) => Math.min(ctx.valve_max_start, ctx.valve_max_timer) }),\n                        on: {\n                          PID_VALVE: { actions: 'setValvePID' },\n                          VALVE_MAX_TIMER: {actions: assign({ lower_limit: (ctx, evt) => Math.min(ctx.valve_start, evt.payload), upper_limit: (ctx, evt) => Math.min(ctx.valve_start, evt.payload) })}, \n                        },\n                        after: {\n                          START_DELAY: {\n                            target: '#regulate_startup', actions: assign({                              \n                              pid_setpoint: (ctx, evt) => {\n                                return ctx.T25 + 1;\n                              },\n\n                            })\n                          }\n                        }\n                      },\n                      regulate: {\n                        id: 'regulate_startup',\n                        entry: assign({ \n                          ground_pid_setpoint: (ctx,_evt)=> {\n                            if(ctx.snow === true)\n                              return ctx.ground_setpoint;\n                            else if(ctx.snow_prob === true)\n                              return ctx.ground_setpoint_snow_prob;\n                            else if (ctx.frost === true)\n                              return ctx.ground_setpoint_frost + ctx.air;\n                            else if (ctx.standby === true)\n                              return ctx.standby_ground_setpoint;\n                            else return ctx.ground_setpoint;\n                            },\n                          power_pid_setpoint: (ctx,evt)=> ctx.power_setpoint_start, pid: true, lower_limit: (ctx, evt) => ctx.valve_min, upper_limit: (ctx, evt) => Math.min(ctx.valve_max_start, ctx.valve_max_timer), TIMER_RAISE_SETPOINT: (ctx, evt) => env.get('TIMER_RAISE_SETPOINT') }),\n                        exit: assign({\n                          upper_limit: (ctx, evt) => Math.min(ctx.valve_max, ctx.valve_max_timer),\n                          pid_setpoint: (ctx, evt) => {\n                            return ctx.T25;\n                          }\n                        }),\n                      always: [\n                        { target: 'done', cond: (ctx, evt) => ctx.ground > ctx.ground_setpoint && ctx.timed > 1, actions: assign({ valve: 0 }) },\n                        //{ target: 'done', cond: (ctx, evt) => ctx.ground > ctx.standby_ground_setpoint && ctx.standby === true, actions: assign({ valve: 0 }) },\n                        { target: 'done', cond: (ctx, evt) => ctx.T25 >= ctx.setpoint },\n                        //{ target: 'done', cond: (ctx, evt) => ctx.T26 != undefined && ctx.T26 >= env.get('T26_START') }\n                        ],//env.get('T26_START')\n                        on: {\n                          PID_VALVE: { actions: 'setValvePID' },                          \n                          VALVE_MAX_TIMER: {actions: assign({ upper_limit: (ctx, evt) => Math.min(ctx.valve_max_start, evt.payload) })}, \n                        },\n                        after: {\n                          STARTUP_TIMEOUT: { target: 'done' },\n                          //10: 'done',                         \n                        },\n                        initial: 'rising',\n                        states: {\n                          rising: {\n                            after: {\n                              TIMER_RAISE_SETPOINT: {\n                                target: 'rising', cond: (ctx, evt) => ctx.pid_setpoint < ctx.setpoint, actions: assign({\n                                  pid_setpoint: (ctx, evt) => {\n                                    return ctx.pid_setpoint + 1;\n                                  }\n                                })\n                              }\n                            }\n\n                          }\n                        },\n                      },\n                      done: {                        \n                        entry: assign({ pump1: true, pump2: true, pid: true, lower_limit: (ctx, evt) => ctx.valve_min,upper_limit: (ctx, evt) => Math.min(ctx.valve_max, ctx.valve_max_timer) }),\n                        type: 'final',\n                      }\n                    },\n                    onDone: [\n                      { target: '#after_startup' },                    \n                    ]\n                  },\n                  init: {\n                    id:'after_startup',\n                    always:[\n                      { target: 'timed', cond: (ctx, evt) => ctx.timed > 1 },\n                      { target: 'snow', cond: (ctx, evt) => ctx.snow === true },\n                      { target: 'frost', cond: (ctx, evt) => ctx.frost === true },\n                      { target: 'snow_prob', cond: (ctx, evt) => ctx.snow_prob === true },\n                      { target: 'frost_between_pipes', cond: (ctx, evt) => ctx.frostsikring_bakke === true && ctx.between_pipes < ctx.between_pipes_setpoint },\n                      { target: 'standby', cond: (ctx, evt) => ctx.standby === true },\n                      { target: 'last', cond: (ctx,evt) => ctx.last >= ctx.last_start && ctx.last_enable === true },\n                      { target: 'dryup' },//default                    \n                    ]\n                  },\n                  standby: {\n                    id: 'standby',\n                    always: [\n                      { target: 'timed', cond: (ctx, evt) => ctx.timed > 1 },                      \n                      { target: 'snow', cond: (ctx, evt) => ctx.snow === true },\n                      { target: 'snow_prob', cond: (ctx, evt) => ctx.snow_prob === true },\n                      { target: 'dryup', cond: (ctx, evt) => ctx.timed > 0 },\n                      { target: 'shutdown', cond: (ctx, evt) => ctx.standby === false || 'guardStop' === true },\n                    ],\n                    entry: assign({ ground_pid_setpoint: (ctx,_evt)=> ctx.standby_ground_setpoint, pid: true, pump1: true, pump2: true, pid_setpoint: (ctx, _evt) => ctx.setpoint, power_pid_setpoint: (ctx,evt)=> flow.get('POWER_CONTROL') === true ? flow.get(\"MAX_POWER\") : 100000 }),\n                    on: {\n                      POWER_SETPOINT: { actions: assign({ power_pid_setpoint: (ctx, evt) => flow.get('POWER_CONTROL') === true ? Number(evt.payload) : 100000 }) },\n                      PID_VALVE: { actions: 'setValvePID' },\n                      VALVE_MAX_TIMER: {actions: assign({ upper_limit: (ctx, evt) => Math.min(ctx.valve_max, evt.payload) })},\n                      GROUND_SETPOINT_STANDBY: { actions: [assign({ ground_pid_setpoint: (_ctx,evt)=> Number(evt.payload)}),'setGROUND_SETPOINT_STANDBY'] },\n                    },\n                  },\n                  timed: {\n                    id: 'timed',\n                    entry: assign({ pump1: true, pump2: true, upper_limit: (ctx, evt) => ctx.valve_max,power_pid_setpoint: (ctx,evt)=> flow.get('POWER_CONTROL') === true ? flow.get(\"MAX_POWER_SNOW\") : 100000 }),\n                    always: { target: 'shutdown', cond: (ctx, evt) => ctx.timed === 0 },\n                    exit: assign({ timed: 0 }),\n                    after: {\n                      TIMED: { target: 'shutdown' }\n                    },\n                    on: {\n                      POWER_SETPOINT_SNOW: { actions: assign({ ground_pid_setpoint: (ctx,_evt)=> ctx.ground_setpoint,pid: true, pid_setpoint: (ctx, evt) => ctx.setpoint, power_pid_setpoint: (ctx, evt) => flow.get('POWER_CONTROL') === true ? Number(evt.payload) : 100000 }) },\n                      PID_VALVE: { actions: 'setValvePID' },\n                    },\n                  },\n                  snow: {\n                    id: 'snow',\n                    entry: assign({ pid: true, pid_setpoint: (ctx, evt) => ctx.setpoint,ground_pid_setpoint: (ctx,_evt)=> ctx.ground_setpoint, pump1: true, pump2: true, TIMER_RAISE_SETPOINT: 1,power_pid_setpoint: (ctx,evt)=> flow.get('POWER_CONTROL') === true ? flow.get(\"MAX_POWER_SNOW\") : 100000 }),\n                    always: [\n                      { target: 'timed', cond: (ctx, evt) => ctx.timed > 1 },\n                      { target: '#shutdown', cond: 'guardStop' },\n                      { target: 'dryup', cond: (ctx, evt) => ctx.snow === false }],\n                    on: {\n                      POWER_SETPOINT_SNOW: { actions: assign({ power_pid_setpoint: (ctx, evt) => flow.get('POWER_CONTROL') === true ? Number(evt.payload) : 100000 }) },\n                      PID_VALVE: { actions: 'setValvePID' },\n                      VALVE_MAX_TIMER: {actions: assign({ upper_limit: (ctx, evt) => Math.min(ctx.valve_max, evt.payload) })},\n                    },                   \n                  },\n                  dryup: {\n                    id: 'dryup',\n                    entry: assign({ ground_pid_setpoint: (ctx,_evt)=> ctx.dryup_ground_setpoint_high, pump1: true, pump2: true, dryup_counter: 0,power_pid_setpoint: (ctx,evt)=> flow.get('POWER_CONTROL') === true ? flow.get(\"MAX_POWER_SNOW\") : 100000 }),\n                    exit: assign({ dryup_counter: 0 }),\n                    always: [\n                      { target: 'timed', cond: (ctx, evt) => ctx.timed > 1 },\n                      { target: '#shutdown', cond: 'guardStop' },\n                      { target: 'snow', cond: (ctx, evt) => ctx.snow === true },\n                      { target: 'snow_prob', cond: (ctx, evt) => ctx.snow_prob === true },\n                      { target: '#shutdown', cond: (ctx, evt) => ctx.dryup_counter >= ctx.dryup_counter_max },\n                      //{ target: 'standby', cond: (ctx, evt) => ctx.standby === true },\n                    ],\n                    after: {\n                      DRYUP: [{ target: '#shutdown', cond: (ctx, evt) => ctx.standby === false },\n                      { target: '#standby', cond: (ctx, evt) => ctx.standby === true },\n                      ]\n                    },\n                    initial: 'heating',\n                    on: {\n                      POWER_SETPOINT_SNOW: { actions: assign({ power_pid_setpoint: (ctx, evt) => flow.get('POWER_CONTROL') === true ? Number(evt.payload) : 100000 }) },\n                    },\n                    states: {\n                      heating: {\n                        always: { target: 'cooling', cond: (ctx, evt) => ctx.ground > ctx.dryup_ground_setpoint_high },\n                        entry: assign({ pid: true, pid_setpoint: (ctx, evt) => ctx.setpoint }),\n                        on: {\n                          PID_VALVE: { actions: 'setValvePID' },\n                          VALVE_MAX_TIMER: {actions: assign({ upper_limit: (ctx, evt) => Math.min(ctx.valve_max, evt.payload) })},\n                        },\n                      },\n                      cooling: {\n                        always: { target: 'heating', cond: (ctx, evt) => ctx.ground <= ctx.dryup_ground_setpoint_low },\n                        entry: assign({ pid: false, dryup_counter: (ctx, evt) => ctx.dryup_counter + 1 }),\n                        invoke: {\n                          src: coolingMachine,\n                          data: {\n                            valve: (context, event) => context.valve,\n                            valve_min: (context, event) => context.valve_min,\n                          },\n                        },\n                        on: {\n                          'valve': { actions: assign({ valve: (ctx, evt) => evt.payload <= ctx.vale_min ? ctx.valve_min : evt.payload }) },\n                        },\n                      }\n                    },\n                  },\n                  last: {\n                    id: 'last',\n                    entry: assign({ pump1: true, pump2: true,power_pid_setpoint: (ctx,evt)=> flow.get('POWER_CONTROL') === true ? flow.get(\"MAX_POWER_SNOW\") : 100000 }),\n                    always: [\n                      { target: 'timed', cond: (ctx, evt) => ctx.timed > 1 },\n                      { target: 'snow', cond: (ctx, evt) => ctx.snow === true },\n                      { target: 'standby', cond: (ctx, evt) => ctx.standby === true },\n                      { target: '#shutdown', cond: 'guardStop' },\n                      { target: 'shutdown', cond: (ctx, evt) => ctx.last <= ctx.last_stop || ctx.last_enable === false }\n                    ],\n                    initial: 'heating',\n                    on: {\n                      POWER_SETPOINT_SNOW: { actions: assign({ power_pid_setpoint: (ctx, evt) => flow.get('POWER_CONTROL') === true ? Number(evt.payload) : 100000 }) },\n                    },\n                    states: {\n                      heating: {\n                        always: { target: 'cooling', cond: (ctx, evt) => ctx.ground > ctx.ground_setpoint_frost + ctx.air },\n                        entry: assign({ pid: true, pid_setpoint: (ctx, evt) => ctx.setpoint }),\n                        on: {\n                          PID_VALVE: { actions: 'setValvePID' },\n                          VALVE_MAX_TIMER: {actions: assign({ upper_limit: (ctx, evt) => Math.min(ctx.valve_max, evt.payload) })},\n                        },\n                      },\n                      cooling: {\n                        always: { target: 'heating', cond: (ctx, evt) => ctx.ground <= ctx.ground_setpoint_frost + ctx.air },\n                        entry: assign({ pid: false }),\n                        invoke: {\n                          src: coolingMachine,\n                          data: {\n                            valve: (context, event) => context.valve,\n                            valve_min: (context, event) => context.valve_min,\n                          },\n                        },\n                        on: {\n                          'valve': { actions: assign({ valve: (ctx, evt) => evt.payload <= ctx.vale_min ? ctx.valve_min : evt.payload }) },\n                        },\n                      },\n                    },\n                  },\n                  frost: {\n                    id: 'frost',\n                    entry: assign({ pump1: true, pump2: true,power_pid_setpoint: (ctx,evt)=> flow.get('POWER_CONTROL') === true ? flow.get(\"MAX_POWER\") : 100000 }),\n                    always: [\n                      { target: 'timed', cond: (ctx, evt) => ctx.timed > 1 },\n                      { target: 'snow', cond: (ctx, evt) => ctx.snow === true },\n                      { target: 'standby', cond: (ctx, evt) => ctx.standby === true },\n                      { target: '#shutdown', cond: 'guardStop' },\n                      { target: 'shutdown', cond: (ctx, evt) => ctx.frost === false }\n                    ],\n                    on: {\n                      POWER_SETPOINT: { actions: assign({ ground_pid_setpoint: (ctx,_evt)=> ctx.ground_setpoint_frost + ctx.air, pid: true, pid_setpoint: (ctx, evt) => ctx.setpoint, power_pid_setpoint: (ctx, evt) => flow.get('POWER_CONTROL') === true ? Number(evt.payload) : 100000 }) },\n                      PID_VALVE: { actions: 'setValvePID' },\n                      VALVE_MAX_TIMER: {actions: assign({ upper_limit: (ctx, evt) => Math.min(ctx.valve_max, evt.payload) })},\n                    },\n                    after: {\n                      FROST: { target: 'shutdown' }\n                    },\n                  },\n                  frost_between_pipes: {\n                    id: 'frost_between_pipes',\n                    entry: assign({ pump1: true, pump2: true,power_pid_setpoint: (ctx,evt)=> flow.get('POWER_CONTROL') === true ? flow.get(\"MAX_POWER\") : 100000 }),\n                    always: [\n                      { target: 'timed', cond: (ctx, evt) => ctx.timed > 1 },\n                      { target: 'snow', cond: (ctx, evt) => ctx.snow === true },\n                      { target: 'standby', cond: (ctx, evt) => ctx.standby === true },\n                      { target: 'shutdown', cond: (ctx, evt) => ctx.between_pipes > ctx.between_pipes_setpoint }\n\n                    ],\n                    entry: assign({ pid: true }),\n                    on: {\n                      PID_VALVE: { actions: 'setValvePID' },\n                      POWER_SETPOINT: { actions: assign({ power_pid_setpoint: (ctx, evt) => flow.get('POWER_CONTROL') === true ? Number(evt.payload) : 100000 }) },\n                      VALVE_MAX_TIMER: {actions: assign({ upper_limit: (ctx, evt) => Math.min(ctx.valve_max, evt.payload) })},\n                    },\n                  },\n                  snow_prob: {\n                    id: 'snow_prob',\n                    entry: assign({ ground_pid_setpoint: (ctx,_evt)=> ctx.ground_setpoint_snow_prob, pid:true, pid_setpoint: (ctx, evt) => ctx.setpoint ,pump1: true, pump2: true, TIMER_RAISE_SETPOINT: () => env.get('TIMER_RAISE_SETPOINT'),power_pid_setpoint: (ctx,evt)=> flow.get('POWER_CONTROL') === true ? flow.get(\"MAX_POWER\") : 100000 }),\n                    always: [\n                      { target: 'timed', cond: (ctx, evt) => ctx.timed > 1 },\n                      { target: 'snow', cond: (ctx, evt) => ctx.snow === true },\n                      //{ target: 'standby', cond: (ctx, evt) => ctx.standby === true },\n                      { target: 'shutdown', cond: 'guardStop' },\n                      { target: 'shutdown', cond: (ctx, evt) => ctx.snow_prob === false }\n                    ],\n                    on: {\n                      POWER_SETPOINT: { actions: assign({ power_pid_setpoint: (ctx, evt) => flow.get('POWER_CONTROL') === true ? Number(evt.payload) : 100000 }) },\n                      PID_VALVE: { actions: 'setValvePID' },\n                      VALVE_MAX_TIMER: {actions: assign({ upper_limit: (ctx, evt) => Math.min(ctx.valve_max, evt.payload) })},\n                    },\n                    after: {\n                      SNOW_PROB: { target: 'shutdown' }\n                    }\n                  },\n                },\n              },\n            },\n          },\n          manual: {\n            id: 'manual',\n            always: { target: 'auto', cond: (ctx, evt) => ctx.manual === false },\n            entry: assign({ pid: false, pid_start: false }),\n            on: {\n              VALVE: { actions: 'setValve' },\n              VALVE_PRIME: { actions: assign({ valve_prime: (ctx, evt) => evt.payload }) },\n              PUMP1: { actions: assign({ pump1: (ctx, evt) => evt.payload }) },\n              PUMP2: { actions: assign({ pump2: (ctx, evt) => evt.payload }) },\n            },\n          },\n        },\n        on: {\n          MAN: { actions: 'setMan' },\n          START: { actions: assign({ timed: 1 }) },\n          TIMED: { actions: assign({ timed: (ctx, evt) => evt.payload }) },\n        }\n      },\n      critical: {\n        id: 'critical',\n        entry: assign({ valve: 0, timed: 0, pump1: false, pump2: false }),\n        states: {\n          lavt_trykk: {\n            id: 'lavt_trykk',\n            always: [{ target: '#off', cond: (ctx, evt) => ctx.lowest_pressure != undefined && ctx.lowest_pressure > ctx.pressure_limit,actions: assign({ error: 0 }) },\n            { target: '#manual', cond: (ctx, evt) => ctx.manual === true }\n            ]\n          },\n          glykol_for_varm: {\n            id: 'overheat',\n            always: [{ target: '#off', cond: (ctx, evt) => ctx.T25 != undefined && ctx.T25 != 'error' && ctx.T25 < env.get('T25_MAX') },\n            { target: '#manual', cond: (ctx, evt) => ctx.manual === true }\n            ]\n          }\n        },\n        on: {\n          MAN: { actions: 'setMan' },\n        }\n      },\n      warning: {\n        id: 'warning',\n        entry: assign({ valve: 0, timed: 0, pump1: false, pump2: false }),\n        states: {\n          ground_error: {\n            id: 'ground_error',\n            always: { target: '#off', cond: (ctx, evt) => ctx.ground != \"error\", actions: assign({ error: 0 }) },\n            //exit: assign({ ignore_ground: true })\n          },\n          air_error: {\n            id: 'air_error',\n            always: { target: '#off', cond: (ctx, evt) => ctx.air != \"error\", actions: assign({ error: 0 }) },\n            //exit: assign({ ignore_air: true })\n          }\n        },\n        on: {\n          SUPPRESS_WARNING: 'enabled'\n        }\n      }\n    }\n  },\n  // Configuration containing guards, actions, activities, ...\n  // see above\n  config: {\n    guards: { guardHeatON, guardStart, guardHeatOFF, guardStop },\n    actions: { setT25, setTIMEOUT_DRYUP, setSTANDBY, setSETPOINT, setSETPOINT_RETUR, setTIMEOUT_FROST, setValvePID, setTIMEOUT_SNOW_PROB, setSHUNT_MIN, setFROSTSIKRING_BAKKE, setGROUND_SETPOINT_SNOW_PROB, setGROUND_SETPOINT_FROST, setGROUND_SETPOINT_STANDBY, setGROUND_START, setAIR_START, setValve, setEnable, setSnow, setFrost, setBetween, setGround, setSnowProb, setT26, setMan, setGROUND_SETPOINT_SNOW },\n    activities: {},\n    delays: {\n      'TIMER_RAISE_SETPOINT': (context, event) => {\n        return context.TIMER_RAISE_SETPOINT * 60 * 1000;\n      },\n      'TIMED': (context, event) => {\n        return context.timed * 60 * 60 * 1000;\n      },\n      'STARTUP_TIMEOUT': (context, event) => {\n        return context.STARTUP_TIMEOUT * 60 * 1000;\n      },\n      'FROST_DELAY': (context, event) => {\n        return 5 * 60 * 1000;\n      },\n      'PUMP_DELAY': (context, _event) => {\n        return context.pump_delay * 60 * 1000;//minutes\n      },\n      'START_DELAY': (context, _event) => {\n        return context.start_delay * 60 * 1000;//minutes\n      },\n      'DRYUP': (context, event) => {\n        return context.TIMEOUT_DRYUP * 60 * 60 * 1000;//hours\n      },\n      'FROST': (context, event) => {\n        return context.TIMEOUT_FROST * 60 * 60 * 1000;//hours\n      },\n      'SNOW_PROB': (context, event) => {\n        return context.TIMEOUT_SNOW_PROB * 60 * 60 * 1000;//hours\n      },\n    }\n  },\n  // Define listeners (can be an array of functions)\n  //    Functions get called on every state/context update\n};",
        "noerr": 0,
        "x": 390,
        "y": 80,
        "wires": [
            [
                "3093b912c79e049c"
            ],
            []
        ]
    },
    {
        "id": "e499822be82b1a59",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "MIN_limit",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.lower_limit",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "MIN_limit",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2000,
        "y": 240,
        "wires": [
            [
                "313e3b19f79dce85"
            ]
        ]
    },
    {
        "id": "fdd6392e821ef7e0",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "MAX_limit",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.upper_limit",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "MAX_limit",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2020,
        "y": 280,
        "wires": [
            [
                "313e3b19f79dce85"
            ]
        ]
    },
    {
        "id": "313e3b19f79dce85",
        "type": "rbe",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 2210,
        "y": 280,
        "wires": [
            [
                "75b1f47d21fa34cd"
            ]
        ]
    },
    {
        "id": "e023b16cf61405ff",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "reset",
        "func": "return {reset: true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 639,
        "y": 530,
        "wires": [
            [
                "a1b7cb6808f63c44"
            ]
        ]
    },
    {
        "id": "2a7c68108906aa32",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "ALARM",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.error",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 718,
        "wires": [
            [
                "9eba066024d2dac3"
            ]
        ]
    },
    {
        "id": "0760c6bad25a2de2",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "Sett alarm",
        "func": "let id = flow.get('SD_ID');\nglobal.set('ALARM', {\n    ...global.get('ALARM'),\n    [id]: msg.payload\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "9eba066024d2dac3",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 720,
        "wires": [
            [
                "0760c6bad25a2de2"
            ],
            [
                "59858964231b1024"
            ]
        ]
    },
    {
        "id": "59858964231b1024",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "Clear alarm",
        "func": "let id = flow.get('SD_ID');\nlet alarm = global.get('ALARM');\ndelete alarm[id];\nglobal.set('ALARM', alarm);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1484,
        "y": 721,
        "wires": [
            []
        ]
    },
    {
        "id": "af56deab57c6872a",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "sd/update",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 923,
        "y": 971,
        "wires": [
            [
                "6a9edee829b03de9"
            ],
            [
                "079334e4fea418ea"
            ]
        ]
    },
    {
        "id": "bcbf235e911bde56",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "STATE",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1860,
        "y": 1120,
        "wires": [
            [
                "f9ca4b657873cfd0"
            ]
        ]
    },
    {
        "id": "f9ca4b657873cfd0",
        "type": "delay",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 2040,
        "y": 1120,
        "wires": [
            [
                "b6f994bd192a29ef"
            ]
        ]
    },
    {
        "id": "b6f994bd192a29ef",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "STATE",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2220,
        "y": 1120,
        "wires": [
            [
                "c122be716c96c101"
            ]
        ]
    },
    {
        "id": "625f9d2c7e225309",
        "type": "injectx",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "VALVE_MAX_TIMER",
        "x": 720,
        "y": 1380,
        "wires": [
            [
                "9d95bcef9f12cc7f"
            ]
        ]
    },
    {
        "id": "2874dfc750153c7f",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "LAVENERGYSTATE",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 1440,
        "wires": [
            [
                "c68b1fc5377b00fc"
            ]
        ]
    },
    {
        "id": "c68b1fc5377b00fc",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "LAVENERGY",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "LAVENERGY",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 1440,
        "wires": [
            [
                "5ef48f5efaf18e5a"
            ]
        ]
    },
    {
        "id": "385175f2e9df113e",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "CLEARCRON",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 290,
        "y": 1600,
        "wires": [
            [
                "f657ac3c035c8466"
            ]
        ]
    },
    {
        "id": "f657ac3c035c8466",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "payload.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SD_ID",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 446,
        "y": 1632,
        "wires": [
            [
                "9a402ea82cb7c1eb"
            ]
        ]
    },
    {
        "id": "9a402ea82cb7c1eb",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "payload.val",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 570,
        "y": 1520,
        "wires": [
            [
                "e29c986defd56cb5",
                "a69f34d2cc074db8"
            ]
        ]
    },
    {
        "id": "e29c986defd56cb5",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "msgID",
                "pt": "flow",
                "to": "_msgid",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "energysaver",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 1280,
        "wires": [
            [
                "625f9d2c7e225309"
            ]
        ]
    },
    {
        "id": "9d95bcef9f12cc7f",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "_msgid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "msgID",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 910,
        "y": 1280,
        "wires": [
            [
                "16d534af3aa3e9f2"
            ]
        ]
    },
    {
        "id": "be657fe929954180",
        "type": "link out",
        "z": "d76e8ee33ccc284d",
        "name": "link out 18",
        "mode": "link",
        "links": [
            "2e6ffbd8c8f969e4"
        ],
        "x": 1085,
        "y": 1200,
        "wires": []
    },
    {
        "id": "0c79ea867ac1215d",
        "type": "trigger",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "op1": "",
        "op2": "100",
        "op1type": "pay",
        "op2type": "num",
        "duration": "70",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 2,
        "x": 990,
        "y": 1440,
        "wires": [
            [],
            [
                "a69f34d2cc074db8"
            ]
        ]
    },
    {
        "id": "a69f34d2cc074db8",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "VALVE_MAX_TIMER",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "100",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 1480,
        "wires": [
            [
                "be657fe929954180"
            ]
        ]
    },
    {
        "id": "f01e6bafca5642ce",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "Save SingleSone Logg to flow",
        "func": "//if (msg.topic === 'SingleSoneLOGG')\n    flow.set(\"PipesSingleSoneLOGG\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "d2170abff75ac598",
        "type": "subflow:3c5166e4c8bbb8a7",
        "z": "d76e8ee33ccc284d",
        "name": "Logg SingleSone",
        "env": [
            {
                "name": "Filter",
                "value": "Oppstart|stenger",
                "type": "str"
            }
        ],
        "x": 2110,
        "y": 980,
        "wires": [
            [
                "f01e6bafca5642ce"
            ]
        ]
    },
    {
        "id": "da9b88045aca9a25",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "REQSINGLESONELOGG",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1830,
        "y": 920,
        "wires": [
            [
                "edf53cd56babe389"
            ]
        ]
    },
    {
        "id": "edf53cd56babe389",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "For me?",
        "property": "payload.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SD_ID",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2060,
        "y": 913,
        "wires": [
            [
                "d2170abff75ac598"
            ]
        ]
    },
    {
        "id": "fc50d233f330e501",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "PRESSURE_LIMIT",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 145,
        "y": 1011,
        "wires": [
            [
                "5ef48f5efaf18e5a"
            ]
        ]
    },
    {
        "id": "6906821cef4cb9f3",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "function 88",
        "func": "if (msg.payload === true) {\n    //msg.topic = \"ENABLE\";\n    msg.payload = 1;\n}\nelse {\n    //msg.topic = \"DISABLE\";\n    msg.payload = 0;\n}\nmsg.topic = \"enable\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 420,
        "wires": [
            [
                "75b1f47d21fa34cd"
            ]
        ]
    },
    {
        "id": "75b1f47d21fa34cd",
        "type": "PID Multi",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "enable": "0",
        "disabled_op": 0,
        "configtype": "env",
        "controllers": "PID_CONFIG",
        "x": 2585,
        "y": 357,
        "wires": [
            [
                "f1e3e37602982c85"
            ]
        ]
    },
    {
        "id": "39b60cb919b52bf4",
        "type": "link in",
        "z": "d76e8ee33ccc284d",
        "name": "PID",
        "links": [
            "a6b3316227e207e2"
        ],
        "x": 2555,
        "y": 660,
        "wires": [
            [
                "1c1a2913c0c4591f"
            ]
        ]
    },
    {
        "id": "1c1a2913c0c4591f",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "T26",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "T25",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "T24",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "POWER",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "T_GROUND",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 2560,
        "y": 540,
        "wires": [
            [
                "75b1f47d21fa34cd"
            ],
            [
                "75b1f47d21fa34cd"
            ],
            [
                "75b1f47d21fa34cd"
            ],
            [
                "75b1f47d21fa34cd"
            ],
            [
                "75b1f47d21fa34cd"
            ]
        ]
    },
    {
        "id": "2163a15d83ae2a83",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "Setpoint T26",
        "func": "msg.payload = {topic: 'T26', setpoint: msg.payload};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 540,
        "wires": [
            [
                "75b1f47d21fa34cd"
            ]
        ]
    },
    {
        "id": "2ca1e22e32565244",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "Setpoint T25",
        "func": "msg.payload = {topic: 'T25', setpoint: msg.payload};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 474,
        "wires": [
            [
                "75b1f47d21fa34cd"
            ]
        ]
    },
    {
        "id": "16d534af3aa3e9f2",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "number",
                "vt": "number"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 950,
        "y": 1340,
        "wires": [
            [
                "0c79ea867ac1215d",
                "7d205a0dd387bc91",
                "be657fe929954180"
            ]
        ]
    },
    {
        "id": "2e173d4473cc4590",
        "type": "inject",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "LAVENERGY",
        "payload": "energysaver",
        "payloadType": "flow",
        "x": 190,
        "y": 1380,
        "wires": [
            [
                "e29c986defd56cb5"
            ]
        ]
    },
    {
        "id": "83917713c13b75fb",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "energysaver",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1520,
        "wires": [
            [
                "e29c986defd56cb5"
            ]
        ]
    },
    {
        "id": "b849627287c553a4",
        "type": "link in",
        "z": "d76e8ee33ccc284d",
        "name": "link in 24",
        "links": [
            "c3538ae0a77366b7"
        ],
        "x": 885,
        "y": 1600,
        "wires": [
            [
                "0c79ea867ac1215d"
            ]
        ]
    },
    {
        "id": "7d205a0dd387bc91",
        "type": "trigger",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "op1": "",
        "op2": "100",
        "op1type": "pay",
        "op2type": "str",
        "duration": "70",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 2,
        "x": 1130,
        "y": 1560,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f6970a5ba4f8f80a",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "T24_frost",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.T24_frost",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SETPOINT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1984,
        "y": 615,
        "wires": [
            [
                "2f28ea49a4710455"
            ]
        ]
    },
    {
        "id": "cd7517d5870406bb",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "Setpoint T24",
        "func": "msg.payload = {topic: 'T24', setpoint: msg.payload};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 620,
        "wires": [
            [
                "75b1f47d21fa34cd"
            ]
        ]
    },
    {
        "id": "2f28ea49a4710455",
        "type": "rbe",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 2264,
        "y": 688,
        "wires": [
            [
                "cd7517d5870406bb"
            ]
        ]
    },
    {
        "id": "cf3cf5c3dc3273ca",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "T24_FROST",
        "qos": "2",
        "datatype": "json",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 1160,
        "wires": [
            [
                "5ef48f5efaf18e5a"
            ]
        ]
    },
    {
        "id": "02a0f27df94cd906",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "POWER_SETPOINT",
        "qos": "2",
        "datatype": "json",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 1280,
        "wires": [
            [
                "5ef48f5efaf18e5a"
            ]
        ]
    },
    {
        "id": "d50abce8c7fd55d4",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "power_pid_setpoint",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.power_pid_setpoint",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SETPOINT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1990,
        "y": 680,
        "wires": [
            [
                "f8ae3ca39bada98d"
            ]
        ]
    },
    {
        "id": "f8ae3ca39bada98d",
        "type": "rbe",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 2230,
        "y": 740,
        "wires": [
            [
                "cea4a56f40821c62"
            ]
        ]
    },
    {
        "id": "cea4a56f40821c62",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "Setpoint T24",
        "func": "msg.payload = {topic: 'POWER', setpoint: msg.payload};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 740,
        "wires": [
            [
                "75b1f47d21fa34cd"
            ]
        ]
    },
    {
        "id": "306d85762c4ba268",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "POWER_CONTROL",
        "qos": "2",
        "datatype": "json",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 141,
        "y": 1527,
        "wires": [
            [
                "5ef48f5efaf18e5a"
            ]
        ]
    },
    {
        "id": "d40191b63082f39d",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "Modify",
        "func": "if(msg.payload.context['total_duration'] != undefined)\n    msg.payload.context['total_duration'] = Math.floor(msg.payload.context['total_duration']);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 420,
        "wires": [
            [
                "a114f4aa130c3ccd"
            ]
        ]
    },
    {
        "id": "5fbb18d6efa1ef19",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "POWER_SETPOINT_SNOW",
        "qos": "2",
        "datatype": "json",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 165,
        "y": 1641,
        "wires": [
            [
                "5ef48f5efaf18e5a"
            ]
        ]
    },
    {
        "id": "a114f4aa130c3ccd",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "set topic",
        "func": "let id = flow.get(\"SD_ID\");\nmsg.topic = \"APP_STATE/\" + id;\nmsg.payload = {context: msg.payload.context, state: msg.payload.state};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 700,
        "wires": [
            [
                "5cc0d7c15a5b4185"
            ]
        ]
    },
    {
        "id": "f1e3e37602982c85",
        "type": "smooth",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "payload",
        "action": "low",
        "count": "250",
        "round": "1",
        "mult": "single",
        "reduce": false,
        "x": 2840,
        "y": 360,
        "wires": [
            [
                "1ada31a8eb77bada"
            ]
        ]
    },
    {
        "id": "2aeb8f17d12ba993",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "reset",
        "func": "return {reset: true, payload:0};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 560,
        "wires": [
            [
                "f1e3e37602982c85"
            ]
        ]
    },
    {
        "id": "f855e39ef91e2387",
        "type": "mqtt in",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "topic": "INIT",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 2810,
        "y": 560,
        "wires": [
            [
                "2aeb8f17d12ba993",
                "75b1f47d21fa34cd"
            ]
        ]
    },
    {
        "id": "c122be716c96c101",
        "type": "switch",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "INIT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2450,
        "y": 1100,
        "wires": [
            [
                "14b9c3e701b5e33c"
            ]
        ]
    },
    {
        "id": "c56474c9ee321cc3",
        "type": "change",
        "z": "d76e8ee33ccc284d",
        "name": "ground_pid_setpoint",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.ground_pid_setpoint",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SETPOINT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2020,
        "y": 200,
        "wires": [
            [
                "607b9ba48b10571b"
            ]
        ]
    },
    {
        "id": "301d718b76417f0d",
        "type": "function",
        "z": "d76e8ee33ccc284d",
        "name": "Setpoint T_GROUND",
        "func": "msg.payload = {topic: 'T_GROUND', setpoint: msg.payload};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 220,
        "wires": [
            [
                "75b1f47d21fa34cd"
            ]
        ]
    },
    {
        "id": "607b9ba48b10571b",
        "type": "rbe",
        "z": "d76e8ee33ccc284d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 2210,
        "y": 160,
        "wires": [
            [
                "301d718b76417f0d"
            ]
        ]
    },
    {
        "id": "3c5166e4c8bbb8a7",
        "type": "subflow",
        "name": "Logger",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 120,
                "wires": [
                    {
                        "id": "b09f46ee91134acc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 240,
                "wires": [
                    {
                        "id": "eed9a19e88367fdf",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Filter",
                "type": "str",
                "value": "oppstart|stenger"
            },
            {
                "name": "Rows",
                "type": "num",
                "value": "100",
                "ui": {
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 500
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b09f46ee91134acc",
        "type": "function",
        "z": "3c5166e4c8bbb8a7",
        "name": "Read logg",
        "func": "if (msg.payload.id) {\n    flow.set(\"ID\", msg.payload.id);\n    msg.payload = \"docker logs -t root-node-red-1 2>&1 | grep -iwE \" + \"'\" + env.get('Filter') + \"'\" + \" | grep -w \" + msg.payload.id + \" | tac\";    \n    }\nelse msg.payload = \"docker logs -t root-node-red-1 2>&1 | grep -iwE \" + \"'\" + env.get('Filter') + \"' | tac\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 140,
        "wires": [
            [
                "ec946f9e2bedffbe"
            ]
        ]
    },
    {
        "id": "ec946f9e2bedffbe",
        "type": "exec",
        "z": "3c5166e4c8bbb8a7",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 530,
        "y": 180,
        "wires": [
            [
                "eed9a19e88367fdf"
            ],
            [],
            []
        ]
    },
    {
        "id": "eed9a19e88367fdf",
        "type": "function",
        "z": "3c5166e4c8bbb8a7",
        "name": "Process logg ",
        "func": "let n = Number(env.get('Rows'));\nlet logg = msg.payload.split('\\n');\n//logg = logg.length > n ? logg.slice(Math.max(logg.length - n, 0)).map(s => s.trim().split(/ \\d+/)) : logg.map(s => s.trim().split(/ \\d+/));\n\nlogg = logg.map(line => {\n    let [first, ...rest] = line.split(' ');\n    return flow.get(\"ID\") ? [first, rest.slice(1).join(' ')] : [first, rest.join(' ')];\n});\nmsg.payload = logg;\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "5d34e663f4a3f527",
        "type": "subflow",
        "name": "Værdata",
        "info": "",
        "category": "AC5000",
        "in": [],
        "out": [
            {
                "x": 1540,
                "y": 220,
                "wires": [
                    {
                        "id": "c18a49adbf63d36e",
                        "port": 0
                    },
                    {
                        "id": "cf60ccdecb1090b2",
                        "port": 0
                    },
                    {
                        "id": "88081cc7a176fd46",
                        "port": 0
                    },
                    {
                        "id": "6ce8eeba8546b9f5",
                        "port": 0
                    },
                    {
                        "id": "0e4f146265ed7c21",
                        "port": 0
                    },
                    {
                        "id": "a414362292a5e6f8",
                        "port": 0
                    },
                    {
                        "id": "9677c0079b6ac683",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Forstart",
                "type": "num",
                "value": "6"
            },
            {
                "name": "Lengdegrader",
                "type": "num",
                "value": "10.260110"
            },
            {
                "name": "Breddegrader",
                "type": "num",
                "value": "59.247643"
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red/white-globe.svg",
        "status": {
            "x": 920,
            "y": 960,
            "wires": [
                {
                    "id": "9f82ab100774fbfa",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "53f7095ec10aa5d8",
        "type": "http request",
        "z": "5d34e663f4a3f527",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 290,
        "y": 100,
        "wires": [
            [
                "9424a5299fc5cc84"
            ]
        ]
    },
    {
        "id": "e702126258893045",
        "type": "function",
        "z": "5d34e663f4a3f527",
        "name": "",
        "func": "let lon = env.get(\"Lengdegrader\");\nlet lat = env.get(\"Breddegrader\");\nmsg.url = \"https://api.met.no/weatherapi/locationforecast/2.0/complete.json?lat=\" + lat + \"&lon=\" + lon;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 380,
        "wires": [
            [
                "53f7095ec10aa5d8"
            ]
        ]
    },
    {
        "id": "3047561ebc29ea63",
        "type": "function",
        "z": "5d34e663f4a3f527",
        "name": "Snø nå?",
        "func": "let f = env.get(\"Forstart\");\nmsg.payload = msg.payload.properties.timeseries[0].data.next_1_hours.summary.symbol_code;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 620,
        "wires": [
            [
                "ddcd30e040787ccd",
                "3df85e7289be41df"
            ]
        ]
    },
    {
        "id": "61a44e518c421e93",
        "type": "switch",
        "z": "5d34e663f4a3f527",
        "name": "Snø?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "snow",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "sleet",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 770,
        "y": 460,
        "wires": [
            [
                "c18a49adbf63d36e"
            ],
            [
                "c18a49adbf63d36e"
            ],
            [
                "cf60ccdecb1090b2"
            ]
        ]
    },
    {
        "id": "ddcd30e040787ccd",
        "type": "switch",
        "z": "5d34e663f4a3f527",
        "name": "Snø?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "snow",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "sleet",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 810,
        "y": 620,
        "wires": [
            [
                "88081cc7a176fd46"
            ],
            [
                "88081cc7a176fd46"
            ],
            [
                "6ce8eeba8546b9f5"
            ]
        ]
    },
    {
        "id": "88081cc7a176fd46",
        "type": "change",
        "z": "5d34e663f4a3f527",
        "name": "SNOW",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SNOW",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 580,
        "wires": [
            [
                "0e4f146265ed7c21"
            ]
        ]
    },
    {
        "id": "c18a49adbf63d36e",
        "type": "change",
        "z": "5d34e663f4a3f527",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SNOW_PROB",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 200,
        "wires": [
            [
                "a414362292a5e6f8"
            ]
        ]
    },
    {
        "id": "9f82ab100774fbfa",
        "type": "function",
        "z": "5d34e663f4a3f527",
        "name": "",
        "func": "msg.payload = [flow.get(\"weatherNow\"), flow.get(\"weatherThen\")];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "3df85e7289be41df",
        "type": "change",
        "z": "5d34e663f4a3f527",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "weatherNow",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 740,
        "wires": [
            [
                "9f82ab100774fbfa"
            ]
        ]
    },
    {
        "id": "6cc6fabf5f407681",
        "type": "change",
        "z": "5d34e663f4a3f527",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "weatherThen",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 780,
        "wires": [
            [
                "9f82ab100774fbfa"
            ]
        ]
    },
    {
        "id": "cf60ccdecb1090b2",
        "type": "change",
        "z": "5d34e663f4a3f527",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SNOW_PROB",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 520,
        "wires": [
            [
                "a414362292a5e6f8"
            ]
        ]
    },
    {
        "id": "6ce8eeba8546b9f5",
        "type": "change",
        "z": "5d34e663f4a3f527",
        "name": "SNOW",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SNOW",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 620,
        "wires": [
            [
                "0e4f146265ed7c21"
            ]
        ]
    },
    {
        "id": "c0888c22b2bab5ae",
        "type": "mqtt in",
        "z": "5d34e663f4a3f527",
        "name": "",
        "topic": "INIT",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 700,
        "wires": [
            [
                "45fb7d8f5c3ab354"
            ]
        ]
    },
    {
        "id": "0e4f146265ed7c21",
        "type": "change",
        "z": "5d34e663f4a3f527",
        "name": "SNOW_API",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SNOW_API",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 680,
        "wires": [
            [
                "926cc5c076820d81"
            ]
        ]
    },
    {
        "id": "a414362292a5e6f8",
        "type": "change",
        "z": "5d34e663f4a3f527",
        "name": "SNOW_PROB_API",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SNOW_PROB_API",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 280,
        "wires": [
            [
                "926cc5c076820d81"
            ]
        ]
    },
    {
        "id": "47b4ea451f4dab65",
        "type": "function",
        "z": "5d34e663f4a3f527",
        "name": "Forstart",
        "func": "let f = Number(env.get(\"Forstart\"));\n//payload.properties.timeseries[1].data.next_1_hours.summary.symbol_code\n//payload.properties.timeseries[2].data.next_1_hours.summary.symbol_code\n//payload.properties.timeseries[3].data.next_1_hours.summary.symbol_code\n//msg.payload = msg.payload.properties.timeseries[1].data.next_1_hours.summary.symbol_code;\nvar set = 0;\nfor (let i = 1; i <= f; i++) {\n    var text = msg.payload.properties.timeseries[i].data.next_1_hours.summary.symbol_code;\n    if (text.includes('sleet') || text.includes('snow')) {\n        msg.payload = msg.payload.properties.timeseries[i].data.next_1_hours.summary.symbol_code;\n        set = 1;\n        break;\n    }\n}\nif (set === 0)\n    msg.payload = msg.payload.properties.timeseries[f].data.next_1_hours.summary.symbol_code;\nreturn msg;\n\n//payload.properties.timeseries[2].data.next_1_hours.summary.symbol_code",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 360,
        "wires": [
            [
                "6cc6fabf5f407681",
                "61a44e518c421e93"
            ]
        ]
    },
    {
        "id": "9677c0079b6ac683",
        "type": "function",
        "z": "5d34e663f4a3f527",
        "name": "AIR_TEMPERATURE_API",
        "func": "let data = msg.payload.properties.timeseries[0].data.instant.details;\nflow.set(\"air_temperature\", data.air_temperature)\nflow.set(\"dew_point_temperature\", data.dew_point_temperature)\nreturn { payload: { air_temperature: data.air_temperature, dew_point_temperature: data.dew_point_temperature }, topic: \"AIR_TEMPERATURE_API\" };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "926cc5c076820d81",
        "type": "function",
        "z": "5d34e663f4a3f527",
        "name": "Logg Værdata",
        "func": "if (msg.topic === \"SNOW_PROB_API\" && msg.payload)\n    console.log(\"Snø sannsynlig (værdata api.met.no)\");\n\nif (msg.topic === \"SNOW_API\" && msg.payload)\n    console.log(\"Snø (værdata api.met.no)\");\n\nmsg.topic = 'WEATHERDATA';\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 320,
        "wires": [
            [
                "382168e9efb388a4"
            ]
        ]
    },
    {
        "id": "d02b7b56c94e0f1d",
        "type": "uib-sender",
        "z": "5d34e663f4a3f527",
        "url": "user",
        "uibId": "1a8f52fc0dc9ed73",
        "name": "",
        "topic": "",
        "passthrough": false,
        "return": false,
        "outputs": 0,
        "x": 1990,
        "y": 380,
        "wires": []
    },
    {
        "id": "1e9cacae93fe8a85",
        "type": "function",
        "z": "5d34e663f4a3f527",
        "name": "Location & Forstart information Sender",
        "func": "let lat = env.get(\"Breddegrader\");\nlet lon = env.get(\"Lengdegrader\");\nlet forstart = env.get(\"Forstart\");\nmsg.payload = [lat, lon, forstart]\nmsg.topic = 'LOCATION'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 420,
        "wires": [
            [
                "d02b7b56c94e0f1d"
            ]
        ]
    },
    {
        "id": "4e12015caad1dfd5",
        "type": "inject",
        "z": "5d34e663f4a3f527",
        "name": "",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1630,
        "y": 480,
        "wires": [
            [
                "1e9cacae93fe8a85"
            ]
        ]
    },
    {
        "id": "382168e9efb388a4",
        "type": "subflow:3c5166e4c8bbb8a7",
        "z": "5d34e663f4a3f527",
        "name": "",
        "env": [
            {
                "name": "Filter",
                "value": "api.met.no",
                "type": "str"
            }
        ],
        "x": 1920,
        "y": 220,
        "wires": [
            [
                "af1ffef49f2e6908"
            ]
        ]
    },
    {
        "id": "57c692288890ae41",
        "type": "mqtt in",
        "z": "5d34e663f4a3f527",
        "name": "",
        "topic": "READY_FOR_CONTENT",
        "qos": "2",
        "datatype": "auto",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1610,
        "y": 120,
        "wires": [
            [
                "382168e9efb388a4"
            ]
        ]
    },
    {
        "id": "af1ffef49f2e6908",
        "type": "change",
        "z": "5d34e663f4a3f527",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "WEATHERDATA",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2030,
        "y": 300,
        "wires": [
            [
                "d02b7b56c94e0f1d"
            ]
        ]
    },
    {
        "id": "45fb7d8f5c3ab354",
        "type": "trigger",
        "z": "5d34e663f4a3f527",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-60",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 310,
        "y": 800,
        "wires": [
            [
                "e702126258893045"
            ]
        ]
    },
    {
        "id": "1d82972e50bb4716",
        "type": "mqtt in",
        "z": "5d34e663f4a3f527",
        "name": "",
        "topic": "reset",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 880,
        "wires": [
            [
                "45fb7d8f5c3ab354"
            ]
        ]
    },
    {
        "id": "9424a5299fc5cc84",
        "type": "switch",
        "z": "5d34e663f4a3f527",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "object",
                "vt": "object"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 220,
        "wires": [
            [
                "47b4ea451f4dab65",
                "9677c0079b6ac683",
                "3047561ebc29ea63"
            ]
        ]
    },
    {
        "id": "c9d0f42c.8b8f98",
        "type": "subflow",
        "name": "Relè",
        "info": "",
        "category": "AC5000",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "74e5623a.94cabc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 100,
                "wires": [
                    {
                        "id": "f25caa00.51e5f8",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ID",
                "type": "num",
                "value": "1"
            },
            {
                "name": "R",
                "type": "num",
                "value": "1"
            },
            {
                "name": "Label",
                "type": "str",
                "value": "Relè"
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_switch.png",
        "status": {
            "x": 1140,
            "y": 200,
            "wires": [
                {
                    "id": "f25caa00.51e5f8",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "df7fc1eb.5e0ec",
        "type": "function",
        "z": "c9d0f42c.8b8f98",
        "name": "",
        "func": "msg.filename = \"/dev/R\" + env.get(\"R\").toString() + \"/value\";\nvar boolMsg = { payload: msg.payload };\nmsg.payload = Number(msg.payload).toString();\nreturn [msg,boolMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 300,
        "y": 40,
        "wires": [
            [
                "5b880fbe.7395c"
            ],
            []
        ]
    },
    {
        "id": "cbfe719.535d29",
        "type": "inject",
        "z": "c9d0f42c.8b8f98",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "Test",
        "payload": "false",
        "payloadType": "bool",
        "x": 120,
        "y": 340,
        "wires": [
            [
                "74e5623a.94cabc"
            ]
        ]
    },
    {
        "id": "f25caa00.51e5f8",
        "type": "function",
        "z": "c9d0f42c.8b8f98",
        "name": "",
        "func": "var boolMsg = { payload: Boolean(Number(msg.payload)) };\nreturn [msg,boolMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 260,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "64b98176.c2384",
        "type": "file in",
        "z": "c9d0f42c.8b8f98",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 370,
        "y": 220,
        "wires": [
            [
                "f25caa00.51e5f8"
            ]
        ]
    },
    {
        "id": "3ee91b4a.f84ab4",
        "type": "function",
        "z": "c9d0f42c.8b8f98",
        "name": "",
        "func": "msg.filename = \"/dev/R\" + env.get(\"R\").toString() + \"/value\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 40,
        "wires": [
            [
                "64b98176.c2384"
            ]
        ]
    },
    {
        "id": "5b880fbe.7395c",
        "type": "file",
        "z": "c9d0f42c.8b8f98",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 500,
        "y": 40,
        "wires": [
            [
                "3ee91b4a.f84ab4"
            ]
        ]
    },
    {
        "id": "74e5623a.94cabc",
        "type": "switch",
        "z": "c9d0f42c.8b8f98",
        "name": "Bool?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "boolean",
                "vt": "boolean"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 100,
        "wires": [
            [
                "df7fc1eb.5e0ec"
            ]
        ]
    },
    {
        "id": "28433469.fd5fec",
        "type": "subflow",
        "name": "0-10V",
        "info": "",
        "category": "AC5000",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "65fddf99031528d1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1220,
                "y": 60,
                "wires": [
                    {
                        "id": "9497c78ab9c7bc5c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "AO",
                "type": "num",
                "value": "1"
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red/status.svg",
        "status": {
            "x": 840,
            "y": 740,
            "wires": [
                {
                    "id": "e0f007a30573b522",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "7c5e797f.568d08",
        "type": "inject",
        "z": "28433469.fd5fec",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "fd3041e4ef32c5c6"
            ]
        ]
    },
    {
        "id": "0f1196d858dff9ef",
        "type": "mqtt out",
        "z": "28433469.fd5fec",
        "name": "",
        "topic": "",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e649abf8.0e7988",
        "x": 1590,
        "y": 420,
        "wires": []
    },
    {
        "id": "9497c78ab9c7bc5c",
        "type": "switch",
        "z": "28433469.fd5fec",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "btwn",
                "v": "0",
                "vt": "num",
                "v2": "100",
                "v2t": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "ac4237afa64bc7be"
            ]
        ]
    },
    {
        "id": "65fddf99031528d1",
        "type": "switch",
        "z": "28433469.fd5fec",
        "name": "",
        "property": "AO",
        "propertyType": "env",
        "rules": [
            {
                "t": "btwn",
                "v": "1",
                "vt": "num",
                "v2": "8",
                "v2t": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 90,
        "y": 120,
        "wires": [
            [
                "9497c78ab9c7bc5c"
            ]
        ]
    },
    {
        "id": "fd3041e4ef32c5c6",
        "type": "function",
        "z": "28433469.fd5fec",
        "name": "function 2",
        "func": "var AO = env.get(\"AO\");\nmsg.topic = \"ao\";\nswitch (Number(AO)) {\n    case 1:\n        msg.payload = { device: \"1\", channel: \"1\", value: msg.payload };\n        break;\n    case 2:\n        msg.payload = { device: \"1\", channel: \"2\", value: msg.payload };\n        break;\n    case 3:\n        msg.payload = { device: \"1\", channel: \"3\", value: msg.payload };\n        break;\n    case 4:\n        msg.payload = { device: \"1\", channel: \"4\", value: msg.payload };\n        break;\n    case 5:\n        msg.payload = { device: \"2\", channel: \"1\", value: msg.payload };\n        break;\n    case 6:\n        msg.payload = { device: \"2\", channel: \"2\", value: msg.payload };\n        break;\n    case 7:\n        msg.payload = { device: \"2\", channel: \"3\", value: msg.payload };\n        break;\n    case 8:\n        msg.payload = { device: \"2\", channel: \"4\", value: msg.payload };\n        break;\n    default: msg.topic = \"Error\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 200,
        "wires": [
            [
                "79972740cd8313ef"
            ]
        ]
    },
    {
        "id": "79972740cd8313ef",
        "type": "delay",
        "z": "28433469.fd5fec",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 790,
        "y": 240,
        "wires": [
            [
                "9160f0ee918688aa"
            ]
        ]
    },
    {
        "id": "3a8db50c78b968ba",
        "type": "mqtt in",
        "z": "28433469.fd5fec",
        "name": "",
        "topic": "aostatus",
        "qos": "2",
        "datatype": "json",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 260,
        "y": 580,
        "wires": [
            [
                "4279d626c81c4fe6"
            ]
        ]
    },
    {
        "id": "4279d626c81c4fe6",
        "type": "switch",
        "z": "28433469.fd5fec",
        "name": "",
        "property": "payload.dev",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "AO",
                "vt": "env"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 700,
        "wires": [
            [
                "200d3eb6dd638646"
            ]
        ]
    },
    {
        "id": "200d3eb6dd638646",
        "type": "change",
        "z": "28433469.fd5fec",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 780,
        "wires": [
            [
                "e0f007a30573b522"
            ]
        ]
    },
    {
        "id": "9160f0ee918688aa",
        "type": "json",
        "z": "28433469.fd5fec",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 970,
        "y": 240,
        "wires": [
            [
                "b3d084f862158b13",
                "f744a4cd47f31797"
            ]
        ]
    },
    {
        "id": "ac4237afa64bc7be",
        "type": "rbe",
        "z": "28433469.fd5fec",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 310,
        "y": 200,
        "wires": [
            [
                "7dc27c3ef99f6f7b"
            ]
        ]
    },
    {
        "id": "e27344d137c04ee6",
        "type": "mqtt in",
        "z": "28433469.fd5fec",
        "name": "",
        "topic": "INIT",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 480,
        "wires": [
            [
                "69ad200cd826eb8f",
                "f143ce8458318dc8"
            ]
        ]
    },
    {
        "id": "69ad200cd826eb8f",
        "type": "function",
        "z": "28433469.fd5fec",
        "name": "reset",
        "func": "return {reset: true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 460,
        "wires": [
            [
                "ac4237afa64bc7be",
                "b2ba12e30c0886a1"
            ]
        ]
    },
    {
        "id": "7dc27c3ef99f6f7b",
        "type": "smooth",
        "z": "28433469.fd5fec",
        "name": "",
        "property": "payload",
        "action": "mean",
        "count": "1",
        "round": "2",
        "mult": "single",
        "reduce": false,
        "x": 480,
        "y": 200,
        "wires": [
            [
                "fd3041e4ef32c5c6"
            ]
        ]
    },
    {
        "id": "e0f007a30573b522",
        "type": "smooth",
        "z": "28433469.fd5fec",
        "name": "",
        "property": "payload",
        "action": "mean",
        "count": "1",
        "round": "2",
        "mult": "single",
        "reduce": false,
        "x": 640,
        "y": 760,
        "wires": [
            [
                "b2ba12e30c0886a1"
            ]
        ]
    },
    {
        "id": "f143ce8458318dc8",
        "type": "change",
        "z": "28433469.fd5fec",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 480,
        "wires": [
            [
                "fd3041e4ef32c5c6"
            ]
        ]
    },
    {
        "id": "8f9371face3a8459",
        "type": "function",
        "z": "28433469.fd5fec",
        "name": "function 49",
        "func": "let ao = env.get('AO');\nconsole.log(\"aostatus \" + ao + ': ' + msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "b2ba12e30c0886a1",
        "type": "rbe",
        "z": "28433469.fd5fec",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 790,
        "y": 660,
        "wires": [
            [
                "8f9371face3a8459"
            ]
        ]
    },
    {
        "id": "b3d084f862158b13",
        "type": "function",
        "z": "28433469.fd5fec",
        "name": "function 50",
        "func": "let ao = env.get('AO');\nconsole.log(\"AO \" + ao + \" set: \" + msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1149,
        "y": 176,
        "wires": [
            []
        ]
    },
    {
        "id": "f744a4cd47f31797",
        "type": "switch",
        "z": "28433469.fd5fec",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "INIT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1190,
        "y": 280,
        "wires": [
            [
                "cd121c6398f062e6"
            ]
        ]
    },
    {
        "id": "cd121c6398f062e6",
        "type": "switch",
        "z": "28433469.fd5fec",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "INIT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1410,
        "y": 360,
        "wires": [
            [
                "0f1196d858dff9ef"
            ]
        ]
    },
    {
        "id": "c6a13a8789eda567",
        "type": "subflow",
        "name": "Rammeføler",
        "info": "",
        "category": "AC5000",
        "in": [],
        "out": [
            {
                "x": 1300,
                "y": 180,
                "wires": [
                    {
                        "id": "e9d69467519eda9b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Buss",
                "type": "str",
                "value": "COM3",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "COM3"
                                },
                                "v": "COM3"
                            },
                            {
                                "l": {
                                    "en-US": "COM4"
                                },
                                "v": "COM4"
                            }
                        ]
                    }
                }
            },
            {
                "name": "Addr",
                "type": "num",
                "value": "76"
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-thermometer-three-quarters",
        "status": {
            "x": 1300,
            "y": 80,
            "wires": [
                {
                    "id": "c3a3e816a136339a",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "c3a3e816a136339a",
        "type": "function",
        "z": "c6a13a8789eda567",
        "name": "",
        "func": "let ground = msg.payload.surface.toFixed(2);\nlet between = msg.payload.between_pipes.toFixed(2);\nlet Gmsg = {topic: \"T_GROUND\", payload: ground};\nlet Bmsg = { topic: \"BETWEEN_PIPES\", payload: between };\nmsg.payload = [ground,between];\nreturn [msg, Gmsg, Bmsg];",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 80,
        "wires": [
            [
                "1aa848ebe548aac6"
            ],
            [
                "e9d69467519eda9b"
            ],
            [
                "e9d69467519eda9b"
            ]
        ]
    },
    {
        "id": "9aa5b589e3d0ec0f",
        "type": "mqtt in",
        "z": "c6a13a8789eda567",
        "name": "",
        "topic": "#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 170,
        "y": 80,
        "wires": [
            [
                "a7d4b42d11c68c77"
            ]
        ]
    },
    {
        "id": "a7d4b42d11c68c77",
        "type": "switch",
        "z": "c6a13a8789eda567",
        "name": "Myself",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "topic = $join([$env(\"Buss\"),'/',$formatNumber($env(\"Addr\"),\"1\"),'/Ramme'])",
                "vt": "jsonata"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 190,
        "y": 140,
        "wires": [
            [
                "9423cba17714a7a3"
            ]
        ]
    },
    {
        "id": "2b95cb0ed0e8b0c8",
        "type": "mqtt in",
        "z": "c6a13a8789eda567",
        "name": "",
        "topic": "INIT",
        "qos": "2",
        "datatype": "utf8",
        "broker": "e649abf8.0e7988",
        "inputs": 0,
        "x": 170,
        "y": 260,
        "wires": [
            [
                "34b00f33399f6c7b"
            ]
        ]
    },
    {
        "id": "2a84c0abeeaed7ac",
        "type": "mqtt out",
        "z": "c6a13a8789eda567",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "e649abf8.0e7988",
        "x": 1110,
        "y": 400,
        "wires": []
    },
    {
        "id": "34b00f33399f6c7b",
        "type": "function",
        "z": "c6a13a8789eda567",
        "name": "",
        "func": "let buss = env.get(\"Buss\");\nlet addr = env.get(\"Addr\");\nmsg.topic = \"set/Ramme/\" + buss + \"/\" + addr + \"/Init\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 380,
        "wires": [
            [
                "86d4d8c20d3dcb05"
            ]
        ]
    },
    {
        "id": "207bc62a4a510ba3",
        "type": "mqtt out",
        "z": "c6a13a8789eda567",
        "name": "",
        "topic": "ADD_SENSOR",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e649abf8.0e7988",
        "x": 940,
        "y": 640,
        "wires": []
    },
    {
        "id": "3e5f9454d59d0df1",
        "type": "function",
        "z": "c6a13a8789eda567",
        "name": "",
        "func": "let type = \"Rammeføler, Bakke\";\nmsg.payload = { type: type, \"Addr\": env.get(\"Buss\") + \"/\" + env.get(\"Addr\") };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 620,
        "wires": [
            [
                "207bc62a4a510ba3"
            ]
        ]
    },
    {
        "id": "a2ca0b128086efea",
        "type": "mqtt in",
        "z": "c6a13a8789eda567",
        "name": "",
        "topic": "READY_FOR_CONTENT",
        "qos": "2",
        "datatype": "auto",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 361,
        "y": 632,
        "wires": [
            [
                "3e5f9454d59d0df1"
            ]
        ]
    },
    {
        "id": "da01c7df12c6eabf",
        "type": "inject",
        "z": "c6a13a8789eda567",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 370,
        "y": 700,
        "wires": [
            [
                "3e5f9454d59d0df1"
            ]
        ]
    },
    {
        "id": "1aa848ebe548aac6",
        "type": "function",
        "z": "c6a13a8789eda567",
        "name": "",
        "func": "let type = \"Rammeføler, Bakke\";\nlet val = \"Bakke: \" + msg.payload[0] + \"\\nMellom rør: \" + msg.payload[1];\nmsg.payload = { val: val, type: type, \"Addr\": env.get(\"Buss\") + \"/\" + env.get(\"Addr\") };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 725,
        "y": 513,
        "wires": [
            [
                "207bc62a4a510ba3"
            ]
        ]
    },
    {
        "id": "9423cba17714a7a3",
        "type": "json",
        "z": "c6a13a8789eda567",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 390,
        "y": 100,
        "wires": [
            [
                "c3a3e816a136339a"
            ]
        ]
    },
    {
        "id": "e9d69467519eda9b",
        "type": "function",
        "z": "c6a13a8789eda567",
        "name": "function 28",
        "func": "if (isNaN(Number(msg.payload)) === false) {\nmsg.payload = Number(msg.payload);\nreturn msg;\n}\nelse return null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "86d4d8c20d3dcb05",
        "type": "switch",
        "z": "c6a13a8789eda567",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "INIT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 830,
        "y": 400,
        "wires": [
            [
                "2a84c0abeeaed7ac"
            ]
        ]
    },
    {
        "id": "53389447.eb0fbc",
        "type": "subflow",
        "name": "Værstasjon",
        "info": "",
        "category": "AC5000",
        "in": [],
        "out": [
            {
                "x": 1700,
                "y": 160,
                "wires": [
                    {
                        "id": "ee495b505161f55f",
                        "port": 0
                    },
                    {
                        "id": "25b83915bad1aed4",
                        "port": 0
                    },
                    {
                        "id": "e0ac712200cde141",
                        "port": 0
                    },
                    {
                        "id": "d2c859af165733d5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Buss",
                "type": "str",
                "value": "COM3"
            },
            {
                "name": "Addr",
                "type": "num",
                "value": "71"
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red/link-out.svg",
        "status": {
            "x": 780,
            "y": 600,
            "wires": [
                {
                    "id": "2ae4f6a9266cbbd7",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "46d8bc987545d622",
        "type": "mqtt in",
        "z": "53389447.eb0fbc",
        "name": "",
        "topic": "INIT",
        "qos": "2",
        "datatype": "utf8",
        "broker": "e649abf8.0e7988",
        "inputs": 0,
        "x": 1233,
        "y": 346,
        "wires": [
            [
                "113487b1dddbd5f3"
            ]
        ]
    },
    {
        "id": "ae26798faf3fae8a",
        "type": "mqtt out",
        "z": "53389447.eb0fbc",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "e649abf8.0e7988",
        "x": 1790,
        "y": 580,
        "wires": []
    },
    {
        "id": "113487b1dddbd5f3",
        "type": "function",
        "z": "53389447.eb0fbc",
        "name": "",
        "func": "let buss = env.get(\"Buss\");\nlet addr = env.get(\"Addr\");\nmsg.topic = \"set/Frost/\" + buss + \"/\" + addr + \"/Init\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1333,
        "y": 406,
        "wires": [
            [
                "acecaf7da1940153"
            ]
        ]
    },
    {
        "id": "86923389520f0399",
        "type": "mqtt in",
        "z": "53389447.eb0fbc",
        "name": "",
        "topic": "#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 90,
        "y": 100,
        "wires": [
            [
                "7fcddb1aad5c4eba",
                "4326136fa0faa5b7"
            ]
        ]
    },
    {
        "id": "7fcddb1aad5c4eba",
        "type": "switch",
        "z": "53389447.eb0fbc",
        "name": "RIM",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "topic = $join([$env(\"Buss\"),'/',$formatNumber($env(\"Addr\"),\"1\"),'/Frost/frost'])",
                "vt": "jsonata"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 278,
        "y": 77,
        "wires": [
            [
                "c609ccd2e3a3b917"
            ]
        ]
    },
    {
        "id": "4326136fa0faa5b7",
        "type": "switch",
        "z": "53389447.eb0fbc",
        "name": "Snø sannsynlig",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "topic = $join([$env(\"Buss\"),'/',$formatNumber($env(\"Addr\"),\"1\"),'/Frost/prob'])",
                "vt": "jsonata"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 308,
        "y": 137,
        "wires": [
            [
                "05a05ec4636bb5cd"
            ]
        ]
    },
    {
        "id": "d7859cfabd6bef66",
        "type": "join",
        "z": "53389447.eb0fbc",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 610,
        "y": 360,
        "wires": [
            [
                "2ae4f6a9266cbbd7"
            ]
        ]
    },
    {
        "id": "c609ccd2e3a3b917",
        "type": "change",
        "z": "53389447.eb0fbc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "rim",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 438,
        "y": 77,
        "wires": [
            [
                "bf694fe06e87a8f9"
            ]
        ]
    },
    {
        "id": "05a05ec4636bb5cd",
        "type": "change",
        "z": "53389447.eb0fbc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "snø sannsynlig",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 260,
        "wires": [
            [
                "6a4faac522c6d8e5"
            ]
        ]
    },
    {
        "id": "6a4faac522c6d8e5",
        "type": "change",
        "z": "53389447.eb0fbc",
        "name": "SNOW_PROB",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SNOW_PROB",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 300,
        "wires": [
            [
                "ee495b505161f55f",
                "a5e70a2228422bfe",
                "d7859cfabd6bef66"
            ]
        ]
    },
    {
        "id": "bf694fe06e87a8f9",
        "type": "change",
        "z": "53389447.eb0fbc",
        "name": "FROST",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "FROST",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 180,
        "wires": [
            [
                "74976a35aa34286e",
                "d7859cfabd6bef66",
                "d2c859af165733d5"
            ]
        ]
    },
    {
        "id": "ad8d9a740c42382a",
        "type": "mqtt out",
        "z": "53389447.eb0fbc",
        "name": "",
        "topic": "SD/0/4",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e649abf8.0e7988",
        "x": 1450,
        "y": 60,
        "wires": []
    },
    {
        "id": "21545f2bc5f15904",
        "type": "mqtt out",
        "z": "53389447.eb0fbc",
        "name": "",
        "topic": "SD/0/5",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e649abf8.0e7988",
        "x": 1450,
        "y": 140,
        "wires": []
    },
    {
        "id": "74976a35aa34286e",
        "type": "function",
        "z": "53389447.eb0fbc",
        "name": "RIM",
        "func": "if (msg.payload === true || msg.payload === \"true\")\n    msg.payload = 2;\n    else msg.payload = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 80,
        "wires": [
            [
                "ad8d9a740c42382a"
            ]
        ]
    },
    {
        "id": "a5e70a2228422bfe",
        "type": "function",
        "z": "53389447.eb0fbc",
        "name": "SNOW_PROB",
        "func": "if (msg.payload === true || msg.payload === \"true\")\n    msg.payload = 2;\n    else msg.payload = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 120,
        "wires": [
            [
                "21545f2bc5f15904"
            ]
        ]
    },
    {
        "id": "ee495b505161f55f",
        "type": "function",
        "z": "53389447.eb0fbc",
        "name": "function 27",
        "func": "if (msg.payload === \"true\")\n    msg.payload = true;\nelse msg.payload = false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 380,
        "wires": [
            [
                "25b83915bad1aed4"
            ]
        ]
    },
    {
        "id": "25b83915bad1aed4",
        "type": "change",
        "z": "53389447.eb0fbc",
        "name": "SNOW_PROB_LOCAL",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SNOW_PROB_LOCAL",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1570,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "2ae4f6a9266cbbd7",
        "type": "function",
        "z": "53389447.eb0fbc",
        "name": "function 44",
        "func": "msg.payload = [msg.payload['FROST'], msg.payload['SNOW_PROB']];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "d2c859af165733d5",
        "type": "function",
        "z": "53389447.eb0fbc",
        "name": "function 66",
        "func": "if (msg.payload === \"true\")\n    msg.payload = true;\nelse msg.payload = false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 993,
        "y": 255,
        "wires": [
            [
                "e0ac712200cde141"
            ]
        ]
    },
    {
        "id": "e0ac712200cde141",
        "type": "change",
        "z": "53389447.eb0fbc",
        "name": "SNOW_PROB_LOCAL",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "FROST_LOCAL",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "acecaf7da1940153",
        "type": "switch",
        "z": "53389447.eb0fbc",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "INIT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1570,
        "y": 500,
        "wires": [
            [
                "ae26798faf3fae8a"
            ]
        ]
    },
    {
        "id": "60bddfc1.83414",
        "type": "subflow",
        "name": "Snøføler",
        "info": "",
        "category": "AC5000",
        "in": [],
        "out": [
            {
                "x": 1520,
                "y": 60,
                "wires": [
                    {
                        "id": "68df3fa9497ec9fa",
                        "port": 0
                    },
                    {
                        "id": "cca4e158a57aaf7d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Buss",
                "type": "str",
                "value": "COM3",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "COM3"
                                },
                                "v": "COM3"
                            },
                            {
                                "l": {
                                    "en-US": "COM4"
                                },
                                "v": "COM4"
                            }
                        ]
                    }
                }
            },
            {
                "name": "Addr",
                "type": "num",
                "value": "56",
                "ui": {
                    "type": "spinner",
                    "opts": {
                        "min": 1,
                        "max": 255
                    }
                }
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-snowflake-o",
        "status": {
            "x": 800,
            "y": 280,
            "wires": [
                {
                    "id": "885a7e2a00149c4c",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "68df3fa9497ec9fa",
        "type": "function",
        "z": "60bddfc1.83414",
        "name": "SNOW",
        "func": "msg.topic = \"SNOW\";\nmsg.payload = msg.payload === \"true\" ? true : false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 120,
        "wires": [
            [
                "885a7e2a00149c4c",
                "33b67cac7300b588",
                "183af0b23eeb6fe9",
                "cca4e158a57aaf7d"
            ]
        ]
    },
    {
        "id": "d40f4a1139761283",
        "type": "mqtt in",
        "z": "60bddfc1.83414",
        "name": "",
        "topic": "#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 117,
        "y": 98,
        "wires": [
            [
                "e16c67cd509544a2",
                "dbdcba1d341a04e3"
            ]
        ]
    },
    {
        "id": "e16c67cd509544a2",
        "type": "switch",
        "z": "60bddfc1.83414",
        "name": "Snø",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "topic = $join([$env(\"Buss\"),'/',$formatNumber($env(\"Addr\"),\"1\"),'/Snow/sno_detektert'])",
                "vt": "jsonata"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 120,
        "wires": [
            [
                "68df3fa9497ec9fa"
            ]
        ]
    },
    {
        "id": "6ee6aaafafb8e1a4",
        "type": "mqtt in",
        "z": "60bddfc1.83414",
        "name": "",
        "topic": "INIT",
        "qos": "2",
        "datatype": "utf8",
        "broker": "e649abf8.0e7988",
        "inputs": 0,
        "x": 130,
        "y": 400,
        "wires": [
            [
                "c1f764371cf0965b"
            ]
        ]
    },
    {
        "id": "56f7fa183633118a",
        "type": "mqtt out",
        "z": "60bddfc1.83414",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "e649abf8.0e7988",
        "x": 930,
        "y": 520,
        "wires": []
    },
    {
        "id": "c1f764371cf0965b",
        "type": "function",
        "z": "60bddfc1.83414",
        "name": "",
        "func": "let buss = env.get(\"Buss\");\nlet addr = env.get(\"Addr\");\nmsg.topic = \"set/Snow/\" + buss + \"/\" + addr + \"/Init\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 460,
        "wires": [
            [
                "39a82da00a739977"
            ]
        ]
    },
    {
        "id": "885a7e2a00149c4c",
        "type": "function",
        "z": "60bddfc1.83414",
        "name": "",
        "func": "msg.payload = {\"snø detektert\": msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "66a34f6c7ebabe33",
        "type": "mqtt out",
        "z": "60bddfc1.83414",
        "name": "",
        "topic": "ADD_SENSOR",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e649abf8.0e7988",
        "x": 780,
        "y": 780,
        "wires": []
    },
    {
        "id": "ccdec90be1a4a8b8",
        "type": "function",
        "z": "60bddfc1.83414",
        "name": "",
        "func": "let type = \"Snøføler\";\nmsg.payload = {type: type, \"Addr\": env.get(\"Buss\") + \"/\" + env.get(\"Addr\")};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 780,
        "wires": [
            [
                "66a34f6c7ebabe33"
            ]
        ]
    },
    {
        "id": "fead0f06e4544723",
        "type": "mqtt in",
        "z": "60bddfc1.83414",
        "name": "",
        "topic": "READY_FOR_CONTENT",
        "qos": "2",
        "datatype": "auto",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 201,
        "y": 772,
        "wires": [
            [
                "ccdec90be1a4a8b8"
            ]
        ]
    },
    {
        "id": "7467d02fb5c34727",
        "type": "inject",
        "z": "60bddfc1.83414",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 170,
        "y": 860,
        "wires": [
            [
                "ccdec90be1a4a8b8"
            ]
        ]
    },
    {
        "id": "33b67cac7300b588",
        "type": "function",
        "z": "60bddfc1.83414",
        "name": "",
        "func": "let type = \"Snøføler\";\nlet val = \"Snø detektert: \" + msg.payload;\nmsg.payload = {val: val, type: type, \"Addr\": env.get(\"Buss\") + \"/\" + env.get(\"Addr\")};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 620,
        "wires": [
            [
                "66a34f6c7ebabe33"
            ]
        ]
    },
    {
        "id": "dbdcba1d341a04e3",
        "type": "switch",
        "z": "60bddfc1.83414",
        "name": "Feil på varmeelement",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "topic = $join([$env(\"Buss\"),'/',$formatNumber($env(\"Addr\"),\"1\"),'/Snow/feil_med_varmeelement'])",
                "vt": "jsonata"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 340,
        "y": 200,
        "wires": [
            [
                "f60433bbd7bb7b3c"
            ]
        ]
    },
    {
        "id": "f60433bbd7bb7b3c",
        "type": "switch",
        "z": "60bddfc1.83414",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 300,
        "wires": [
            [
                "3f0a6b5210a7934f"
            ]
        ]
    },
    {
        "id": "3f0a6b5210a7934f",
        "type": "function",
        "z": "60bddfc1.83414",
        "name": "",
        "func": "msg.topic = \"SD/0/1\";\nmsg.payload = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 340,
        "wires": [
            [
                "39a82da00a739977"
            ]
        ]
    },
    {
        "id": "fd33aaa3cb0d5033",
        "type": "mqtt out",
        "z": "60bddfc1.83414",
        "name": "",
        "topic": "SD/0/3",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e649abf8.0e7988",
        "x": 1103,
        "y": 190,
        "wires": []
    },
    {
        "id": "183af0b23eeb6fe9",
        "type": "function",
        "z": "60bddfc1.83414",
        "name": "function 20",
        "func": "if(msg.payload === true)\n    msg.payload = 2;\n    else msg.payload = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 180,
        "wires": [
            [
                "fd33aaa3cb0d5033"
            ]
        ]
    },
    {
        "id": "cca4e158a57aaf7d",
        "type": "change",
        "z": "60bddfc1.83414",
        "name": "SNOW_LOCAL",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SNOW_LOCAL",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "39a82da00a739977",
        "type": "switch",
        "z": "60bddfc1.83414",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "INIT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 748,
        "y": 585,
        "wires": [
            [
                "56f7fa183633118a"
            ]
        ]
    },
    {
        "id": "c8ce8d0d.adcf1",
        "type": "subflow",
        "name": "T Luft",
        "info": "",
        "category": "AC5000",
        "in": [],
        "out": [
            {
                "x": 1360,
                "y": 80,
                "wires": [
                    {
                        "id": "127178a3.d5a5b7",
                        "port": 0
                    },
                    {
                        "id": "2c4e5b60f0c9b548",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Buss",
                "type": "str",
                "value": "COM3",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "COM3"
                                },
                                "v": "COM3"
                            },
                            {
                                "l": {
                                    "en-US": "COM4"
                                },
                                "v": "COM4"
                            }
                        ]
                    }
                }
            },
            {
                "name": "Addr",
                "type": "num",
                "value": "1",
                "ui": {
                    "type": "spinner",
                    "opts": {
                        "min": 1,
                        "max": 255
                    }
                }
            },
            {
                "name": "TIMEOUT",
                "type": "num",
                "value": "15"
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-thermometer-three-quarters",
        "status": {
            "x": 1480,
            "y": 400,
            "wires": [
                {
                    "id": "127178a3.d5a5b7",
                    "port": 0
                },
                {
                    "id": "0161ce165f4a5573",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "127178a3.d5a5b7",
        "type": "function",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "func": "msg.topic = \"T_AIR\";\nmsg.payload = Number(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 80,
        "wires": [
            [
                "4458343860da0763",
                "10466a1b596ba125",
                "f84c9926ccee2795",
                "99710cbf3b1b6833"
            ]
        ]
    },
    {
        "id": "1c599b2c.9329b5",
        "type": "mqtt in",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "topic": "#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "e649abf8.0e7988",
        "inputs": 0,
        "x": 70,
        "y": 60,
        "wires": [
            [
                "5df3d405.2568ac"
            ]
        ]
    },
    {
        "id": "5df3d405.2568ac",
        "type": "switch",
        "z": "c8ce8d0d.adcf1",
        "name": "Myself",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "topic = $join([$env(\"Buss\"),'/',$formatNumber($env(\"Addr\"),\"1\"),'/Luft'])",
                "vt": "jsonata"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 90,
        "y": 120,
        "wires": [
            [
                "127178a3.d5a5b7"
            ]
        ]
    },
    {
        "id": "ad4301da.25996",
        "type": "mqtt in",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "topic": "INIT",
        "qos": "2",
        "datatype": "utf8",
        "broker": "e649abf8.0e7988",
        "inputs": 0,
        "x": 70,
        "y": 240,
        "wires": [
            [
                "3ba67e6.d9f5182",
                "99710cbf3b1b6833"
            ]
        ]
    },
    {
        "id": "cae6e674.e1b0c8",
        "type": "mqtt out",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "e649abf8.0e7988",
        "x": 350,
        "y": 520,
        "wires": []
    },
    {
        "id": "3ba67e6.d9f5182",
        "type": "function",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "func": "let buss = env.get(\"Buss\");\nlet addr = env.get(\"Addr\");\nmsg.topic = \"set/Luft/\" + buss + \"/\" + addr + \"/Init\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 220,
        "y": 360,
        "wires": [
            [
                "b8acb936c76e0ab8"
            ]
        ]
    },
    {
        "id": "f885af8e5f9ce0c9",
        "type": "mqtt out",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "topic": "ADD_SENSOR",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8109e001.579a",
        "x": 840,
        "y": 620,
        "wires": []
    },
    {
        "id": "2ca0691a5ca1d279",
        "type": "function",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "func": "let type = \"Luft\";\nmsg.payload = {type: type, \"Addr\": env.get(\"Buss\") + \"/\" + env.get(\"Addr\")};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 600,
        "wires": [
            [
                "f885af8e5f9ce0c9"
            ]
        ]
    },
    {
        "id": "7a4905e79200d06d",
        "type": "mqtt in",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "topic": "READY_FOR_CONTENT",
        "qos": "2",
        "datatype": "auto",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 261,
        "y": 612,
        "wires": [
            [
                "2ca0691a5ca1d279"
            ]
        ]
    },
    {
        "id": "a0a9fbc84965e189",
        "type": "inject",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 270,
        "y": 680,
        "wires": [
            [
                "2ca0691a5ca1d279",
                "99710cbf3b1b6833"
            ]
        ]
    },
    {
        "id": "f84c9926ccee2795",
        "type": "function",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "func": "msg.payload = parseInt(Number(msg.payload)*100);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 380,
        "wires": [
            [
                "990ef3a4b2576edd"
            ]
        ]
    },
    {
        "id": "4458343860da0763",
        "type": "function",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "func": "let type = \"Luft\";\nmsg.payload = {val: msg.payload, type: type, \"Addr\": env.get(\"Buss\") + \"/\" + env.get(\"Addr\")};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 540,
        "wires": [
            [
                "f885af8e5f9ce0c9"
            ]
        ]
    },
    {
        "id": "17a0a5e24911f708",
        "type": "inject",
        "z": "c8ce8d0d.adcf1",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "20",
        "payloadType": "str",
        "x": 220,
        "y": 180,
        "wires": [
            [
                "127178a3.d5a5b7"
            ]
        ]
    },
    {
        "id": "990ef3a4b2576edd",
        "type": "mqtt out",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "topic": "SD/0/2",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8109e001.579a",
        "x": 950,
        "y": 220,
        "wires": []
    },
    {
        "id": "10466a1b596ba125",
        "type": "switch",
        "z": "c8ce8d0d.adcf1",
        "name": "Error?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "327.67",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 790,
        "y": 300,
        "wires": [
            [
                "cb25b8b9f9c6fa1f"
            ]
        ]
    },
    {
        "id": "cb25b8b9f9c6fa1f",
        "type": "change",
        "z": "c8ce8d0d.adcf1",
        "name": "ALARM 5",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "5",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 280,
        "wires": [
            [
                "9de260cc970d5202"
            ]
        ]
    },
    {
        "id": "9de260cc970d5202",
        "type": "mqtt out",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "topic": "SD/0/1",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8109e001.579a",
        "x": 1157,
        "y": 249,
        "wires": []
    },
    {
        "id": "485a8d87847844e5",
        "type": "trigger",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "15",
        "extend": true,
        "overrideDelay": true,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 2,
        "x": 810,
        "y": 480,
        "wires": [
            [],
            [
                "8d92381164a04ab2",
                "2c4e5b60f0c9b548"
            ]
        ]
    },
    {
        "id": "8d92381164a04ab2",
        "type": "change",
        "z": "c8ce8d0d.adcf1",
        "name": "ALARM 4",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "4",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 460,
        "wires": [
            [
                "9de260cc970d5202"
            ]
        ]
    },
    {
        "id": "2c4e5b60f0c9b548",
        "type": "change",
        "z": "c8ce8d0d.adcf1",
        "name": "Error",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "327.67",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1038,
        "y": 507,
        "wires": [
            [
                "0161ce165f4a5573"
            ]
        ]
    },
    {
        "id": "99710cbf3b1b6833",
        "type": "function",
        "z": "c8ce8d0d.adcf1",
        "name": "delay",
        "func": "let delay = env.get(\"TIMEOUT\");\nmsg.delay = Number(delay) * 1000 * 60;\nmsg.topic = \"T_AIR\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 460,
        "wires": [
            [
                "485a8d87847844e5"
            ]
        ]
    },
    {
        "id": "0161ce165f4a5573",
        "type": "change",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Kommunikasjonsfeil",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 440,
        "wires": [
            [
                "4d2b88d6ddbf6dad"
            ]
        ]
    },
    {
        "id": "bb226ed6d0ea656e",
        "type": "mqtt out",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "topic": "KOMMFEIL",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e649abf8.0e7988",
        "x": 1670,
        "y": 480,
        "wires": []
    },
    {
        "id": "4d2b88d6ddbf6dad",
        "type": "change",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1480,
        "y": 560,
        "wires": [
            [
                "bb226ed6d0ea656e"
            ]
        ]
    },
    {
        "id": "b8acb936c76e0ab8",
        "type": "switch",
        "z": "c8ce8d0d.adcf1",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "INIT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 460,
        "wires": [
            [
                "cae6e674.e1b0c8"
            ]
        ]
    },
    {
        "id": "8109e001.579a",
        "type": "mqtt-broker",
        "z": "c8ce8d0d.adcf1",
        "name": "l",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4ad5dd5.30a1e24",
        "type": "ui_group",
        "z": "c8ce8d0d.adcf1",
        "name": "Default",
        "tab": "1fa6cb55.482f65",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ed087c70.f4264",
        "type": "ui_group",
        "z": "c8ce8d0d.adcf1",
        "name": "Luft",
        "tab": "1fa6cb55.482f65",
        "order": 2,
        "disp": false,
        "width": "14",
        "collapse": false
    },
    {
        "id": "ced4e951.6ccf58",
        "type": "subflow",
        "name": "Tempføler",
        "info": "",
        "category": "AC5000",
        "in": [],
        "out": [
            {
                "x": 1320,
                "y": 220,
                "wires": [
                    {
                        "id": "8c578470995df513",
                        "port": 0
                    },
                    {
                        "id": "d2d6181d.fa2e58",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Buss",
                "type": "str",
                "value": "COM3",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "COM3"
                                },
                                "v": "COM3"
                            },
                            {
                                "l": {
                                    "en-US": "COM4"
                                },
                                "v": "COM4"
                            }
                        ]
                    }
                }
            },
            {
                "name": "Addr",
                "type": "num",
                "value": "20",
                "ui": {
                    "type": "spinner",
                    "opts": {
                        "min": 1,
                        "max": 255
                    }
                }
            },
            {
                "name": "TIMEOUT",
                "type": "num",
                "value": "10"
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-thermometer-three-quarters",
        "status": {
            "x": 1260,
            "y": 120,
            "wires": [
                {
                    "id": "d2d6181d.fa2e58",
                    "port": 0
                },
                {
                    "id": "34af795cc3e11794",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "d2d6181d.fa2e58",
        "type": "function",
        "z": "ced4e951.6ccf58",
        "name": "",
        "func": "if (isNaN(Number(msg.payload)) === false) {\nmsg.payload = Number(msg.payload);\nlet addr = env.get(\"Addr\");\nmsg.topic = \"T\" + addr;\nreturn msg;\n}\nelse return null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 100,
        "wires": [
            [
                "09d7e716779445e9",
                "ae0e47399e3253d6"
            ]
        ]
    },
    {
        "id": "5a76edc0.f3c6c4",
        "type": "mqtt in",
        "z": "ced4e951.6ccf58",
        "name": "",
        "topic": "#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "e649abf8.0e7988",
        "inputs": 0,
        "x": 130,
        "y": 80,
        "wires": [
            [
                "f3e78b82.39aaa8"
            ]
        ]
    },
    {
        "id": "f3e78b82.39aaa8",
        "type": "switch",
        "z": "ced4e951.6ccf58",
        "name": "Myself",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "topic = $join([$env(\"Buss\"),'/',$formatNumber($env(\"Addr\"),\"1\"),'/Temp'])",
                "vt": "jsonata"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 150,
        "y": 140,
        "wires": [
            [
                "d2d6181d.fa2e58"
            ]
        ]
    },
    {
        "id": "6b52b986.1bc3a8",
        "type": "mqtt in",
        "z": "ced4e951.6ccf58",
        "name": "",
        "topic": "INIT",
        "qos": "2",
        "datatype": "utf8",
        "broker": "e649abf8.0e7988",
        "inputs": 0,
        "x": 130,
        "y": 260,
        "wires": [
            [
                "708831ae.873ae",
                "ae0e47399e3253d6"
            ]
        ]
    },
    {
        "id": "cd213aab.5b6898",
        "type": "mqtt out",
        "z": "ced4e951.6ccf58",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "e649abf8.0e7988",
        "x": 670,
        "y": 560,
        "wires": []
    },
    {
        "id": "708831ae.873ae",
        "type": "function",
        "z": "ced4e951.6ccf58",
        "name": "",
        "func": "let buss = env.get(\"Buss\");\nlet addr = env.get(\"Addr\");\nmsg.topic = \"set/Temp/\" + buss + \"/\" + addr + \"/Init\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 400,
        "wires": [
            [
                "4c321eb25acaeb19"
            ]
        ]
    },
    {
        "id": "dde40522e9b48f04",
        "type": "mqtt out",
        "z": "ced4e951.6ccf58",
        "name": "",
        "topic": "ADD_SENSOR",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e649abf8.0e7988",
        "x": 800,
        "y": 720,
        "wires": []
    },
    {
        "id": "447adb1f2f890469",
        "type": "function",
        "z": "ced4e951.6ccf58",
        "name": "",
        "func": "let type = env.get(\"TYPE\");\nmsg.payload = {type: type, \"Addr\": env.get(\"Buss\") + \"/\" + env.get(\"Addr\")};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 700,
        "wires": [
            [
                "dde40522e9b48f04"
            ]
        ]
    },
    {
        "id": "dcbfa02370312c3a",
        "type": "mqtt in",
        "z": "ced4e951.6ccf58",
        "name": "",
        "topic": "READY_FOR_CONTENT",
        "qos": "2",
        "datatype": "auto",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 221,
        "y": 712,
        "wires": [
            [
                "447adb1f2f890469"
            ]
        ]
    },
    {
        "id": "4c01b069822b86f9",
        "type": "inject",
        "z": "ced4e951.6ccf58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 230,
        "y": 840,
        "wires": [
            [
                "447adb1f2f890469",
                "ae0e47399e3253d6"
            ]
        ]
    },
    {
        "id": "09d7e716779445e9",
        "type": "function",
        "z": "ced4e951.6ccf58",
        "name": "",
        "func": "let type = env.get(\"TYPE\");\nmsg.payload = {val: msg.payload, type: type, \"Addr\": env.get(\"Buss\") + \"/\" + env.get(\"Addr\")};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 660,
        "wires": [
            [
                "dde40522e9b48f04"
            ]
        ]
    },
    {
        "id": "e56b31cdbdc0548c",
        "type": "trigger",
        "z": "ced4e951.6ccf58",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "5",
        "extend": true,
        "overrideDelay": true,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 2,
        "x": 850,
        "y": 220,
        "wires": [
            [],
            [
                "8c578470995df513",
                "09d7e716779445e9"
            ]
        ]
    },
    {
        "id": "8c578470995df513",
        "type": "change",
        "z": "ced4e951.6ccf58",
        "name": "Error",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "327.67",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 360,
        "wires": [
            [
                "34af795cc3e11794"
            ]
        ]
    },
    {
        "id": "ae0e47399e3253d6",
        "type": "function",
        "z": "ced4e951.6ccf58",
        "name": "delay",
        "func": "let delay = env.get(\"TIMEOUT\");\nmsg.delay = Number(delay) * 1000 * 60;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 180,
        "wires": [
            [
                "e56b31cdbdc0548c"
            ]
        ]
    },
    {
        "id": "34af795cc3e11794",
        "type": "change",
        "z": "ced4e951.6ccf58",
        "name": "Kommunikasjonsfeil",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Kommunikasjonsfeil",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 260,
        "wires": [
            [
                "171db6055a10ddc5"
            ]
        ]
    },
    {
        "id": "3acd698b1e5e3f85",
        "type": "mqtt out",
        "z": "ced4e951.6ccf58",
        "name": "",
        "topic": "KOMMFEIL",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e649abf8.0e7988",
        "x": 1570,
        "y": 260,
        "wires": []
    },
    {
        "id": "171db6055a10ddc5",
        "type": "change",
        "z": "ced4e951.6ccf58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1380,
        "y": 340,
        "wires": [
            [
                "3acd698b1e5e3f85"
            ]
        ]
    },
    {
        "id": "4c321eb25acaeb19",
        "type": "switch",
        "z": "ced4e951.6ccf58",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "INIT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 460,
        "wires": [
            [
                "cd213aab.5b6898"
            ]
        ]
    },
    {
        "id": "720f32c2.76524c",
        "type": "ui_group",
        "z": "ced4e951.6ccf58",
        "name": "Temperaturer",
        "tab": "1fa6cb55.482f65",
        "order": 4,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "e649abf8.0e7988",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0.0.0.0",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "1fa6cb55.482f65",
        "type": "ui_tab",
        "name": "Aiwell",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "032f90d05548c545",
        "type": "subflow:ced4e951.6ccf58",
        "z": "fe1c0fd7eae8cc55",
        "name": "T23 COM3",
        "env": [
            {
                "name": "Addr",
                "value": "23",
                "type": "num"
            },
            {
                "name": "TIMEOUT",
                "value": "120",
                "type": "num"
            }
        ],
        "x": 300,
        "y": 120,
        "wires": [
            [
                "b96c219173e7cd16"
            ]
        ]
    },
    {
        "id": "1503412b2ee287bf",
        "type": "subflow:ced4e951.6ccf58",
        "z": "fe1c0fd7eae8cc55",
        "name": "T24 COM3",
        "env": [
            {
                "name": "Addr",
                "value": "24",
                "type": "num"
            },
            {
                "name": "TIMEOUT",
                "value": "120",
                "type": "num"
            }
        ],
        "x": 540,
        "y": 120,
        "wires": [
            [
                "b96c219173e7cd16",
                "749cddabd64e373d"
            ]
        ]
    },
    {
        "id": "e96a3dee5af69e5d",
        "type": "subflow:ced4e951.6ccf58",
        "z": "fe1c0fd7eae8cc55",
        "name": "T25 COM3",
        "env": [
            {
                "name": "Addr",
                "value": "25",
                "type": "num"
            },
            {
                "name": "TIMEOUT",
                "value": "120",
                "type": "num"
            }
        ],
        "x": 100,
        "y": 140,
        "wires": [
            [
                "b96c219173e7cd16",
                "749cddabd64e373d"
            ]
        ]
    },
    {
        "id": "6cd0c41711f632e9",
        "type": "subflow:c8ce8d0d.adcf1",
        "z": "fe1c0fd7eae8cc55",
        "name": "T1 COM4",
        "env": [
            {
                "name": "Buss",
                "value": "COM4",
                "type": "str"
            },
            {
                "name": "TIMEOUT",
                "value": "120",
                "type": "num"
            }
        ],
        "x": 160,
        "y": 440,
        "wires": [
            [
                "b96c219173e7cd16"
            ]
        ]
    },
    {
        "id": "af9bd3c64e17deb9",
        "type": "subflow:ced4e951.6ccf58",
        "z": "fe1c0fd7eae8cc55",
        "name": "T26 COM4",
        "env": [
            {
                "name": "Buss",
                "value": "COM4",
                "type": "str"
            },
            {
                "name": "Addr",
                "value": "26",
                "type": "num"
            },
            {
                "name": "TIMEOUT",
                "value": "120",
                "type": "num"
            }
        ],
        "x": 240,
        "y": 520,
        "wires": [
            [
                "b96c219173e7cd16",
                "749cddabd64e373d"
            ]
        ]
    },
    {
        "id": "a9d22969e82b48d9",
        "type": "subflow:60bddfc1.83414",
        "z": "fe1c0fd7eae8cc55",
        "name": "Snø COM4",
        "env": [
            {
                "name": "Buss",
                "value": "COM4",
                "type": "str"
            }
        ],
        "x": 160,
        "y": 300,
        "wires": [
            [
                "b96c219173e7cd16"
            ]
        ]
    },
    {
        "id": "adeb1b143510136e",
        "type": "subflow:53389447.eb0fbc",
        "z": "fe1c0fd7eae8cc55",
        "name": "Vær COM4",
        "env": [
            {
                "name": "Buss",
                "value": "COM4",
                "type": "str"
            }
        ],
        "x": 130,
        "y": 360,
        "wires": [
            [
                "b96c219173e7cd16"
            ]
        ]
    },
    {
        "id": "e253bd0046bec98d",
        "type": "subflow:c6a13a8789eda567",
        "z": "fe1c0fd7eae8cc55",
        "name": "77 COM4",
        "env": [
            {
                "name": "Buss",
                "value": "COM4",
                "type": "str"
            },
            {
                "name": "Addr",
                "value": "77",
                "type": "num"
            }
        ],
        "x": 160,
        "y": 220,
        "wires": [
            [
                "b96c219173e7cd16"
            ]
        ]
    },
    {
        "id": "2bbabf1d9883fea8",
        "type": "subflow:28433469.fd5fec",
        "z": "fe1c0fd7eae8cc55",
        "name": "",
        "x": 990,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "88069af4a8172432",
        "type": "subflow:c9d0f42c.8b8f98",
        "z": "fe1c0fd7eae8cc55",
        "name": "",
        "x": 1130,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "1c86c74cd7cc3ada",
        "type": "subflow:c9d0f42c.8b8f98",
        "z": "fe1c0fd7eae8cc55",
        "name": "",
        "env": [
            {
                "name": "ID",
                "value": "2",
                "type": "num"
            },
            {
                "name": "R",
                "value": "2",
                "type": "num"
            }
        ],
        "x": 830,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "e993ec8b7d94cc39",
        "type": "subflow:5d34e663f4a3f527",
        "z": "fe1c0fd7eae8cc55",
        "name": "",
        "env": [
            {
                "name": "Lengdegrader",
                "value": "11.0488650481558",
                "type": "num"
            },
            {
                "name": "Breddegrader",
                "value": "59.9559743210948",
                "type": "num"
            }
        ],
        "x": 560,
        "y": 460,
        "wires": [
            [
                "b96c219173e7cd16"
            ]
        ]
    },
    {
        "id": "b96c219173e7cd16",
        "type": "subflow:d76e8ee33ccc284d",
        "z": "fe1c0fd7eae8cc55",
        "name": "",
        "env": [
            {
                "name": "DISPLAY_PUMP_PRIME",
                "type": "bool",
                "value": "true"
            },
            {
                "name": "DRIFTSTEMPERATUR",
                "value": "40",
                "type": "num"
            },
            {
                "name": "DRIFTSTEMPERATUR_RETUR",
                "value": "40",
                "type": "num"
            },
            {
                "name": "GROUND_SETPOINT_SNOW",
                "value": "3.5",
                "type": "num"
            },
            {
                "name": "STANDBY",
                "type": "bool",
                "value": "true"
            },
            {
                "name": "GROUND_SETPOINT_STANDBY",
                "value": "0.2",
                "type": "num"
            },
            {
                "name": "SHUNT_MAX_START",
                "value": "100",
                "type": "num"
            },
            {
                "name": "STARTUP_TIMEOUT",
                "value": "0",
                "type": "num"
            },
            {
                "name": "TIMER_RAISE_SETPOINT",
                "value": "10",
                "type": "num"
            },
            {
                "name": "POWER_CONTROL",
                "type": "bool",
                "value": "true"
            },
            {
                "name": "MAX_POWER_START",
                "value": "700",
                "type": "num"
            },
            {
                "name": "P",
                "value": "0.038",
                "type": "num"
            }
        ],
        "x": 570,
        "y": 320,
        "wires": [
            [
                "88069af4a8172432"
            ],
            [
                "1c86c74cd7cc3ada"
            ],
            [],
            [
                "65e4766e6d29e324",
                "2a166779ea319826",
                "2bbabf1d9883fea8"
            ]
        ]
    },
    {
        "id": "37b65f688e490da2",
        "type": "mqtt in",
        "z": "fe1c0fd7eae8cc55",
        "name": "",
        "topic": "mbus_meters/MBUS_36_11",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 800,
        "wires": [
            [
                "fc5b4183d20df5d1"
            ]
        ]
    },
    {
        "id": "3e525d701f9c4239",
        "type": "debug",
        "z": "fe1c0fd7eae8cc55",
        "name": "debug 53",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 700,
        "wires": []
    },
    {
        "id": "fc5b4183d20df5d1",
        "type": "change",
        "z": "fe1c0fd7eae8cc55",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "POWER",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 900,
        "wires": [
            [
                "9dc6143cb4571c29"
            ]
        ]
    },
    {
        "id": "3e516a509b2dd415",
        "type": "function",
        "z": "fe1c0fd7eae8cc55",
        "name": "function 91",
        "func": "node.status({text: msg.payload});\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "96e3f9f10ddd2672",
        "type": "inject",
        "z": "fe1c0fd7eae8cc55",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "T_GROUND",
        "payload": "-2",
        "payloadType": "num",
        "x": 200,
        "y": 620,
        "wires": [
            [
                "b96c219173e7cd16"
            ]
        ]
    },
    {
        "id": "749cddabd64e373d",
        "type": "mqtt out",
        "z": "fe1c0fd7eae8cc55",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e649abf8.0e7988",
        "x": 1190,
        "y": 280,
        "wires": []
    },
    {
        "id": "2a166779ea319826",
        "type": "change",
        "z": "fe1c0fd7eae8cc55",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Shunt",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1550,
        "y": 320,
        "wires": [
            [
                "749cddabd64e373d"
            ]
        ]
    },
    {
        "id": "65e4766e6d29e324",
        "type": "function",
        "z": "fe1c0fd7eae8cc55",
        "name": "function 94",
        "func": "node.status({text: msg.payload});\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 634,
        "wires": [
            []
        ]
    },
    {
        "id": "05fd97c8e9bf2797",
        "type": "inject",
        "z": "fe1c0fd7eae8cc55",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SET_DURATION",
        "payload": "0",
        "payloadType": "num",
        "x": 450,
        "y": 660,
        "wires": [
            [
                "b96c219173e7cd16"
            ]
        ]
    },
    {
        "id": "9dc6143cb4571c29",
        "type": "function",
        "z": "fe1c0fd7eae8cc55",
        "name": "function 100",
        "func": "//msg.payload = msg.payload * 10;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 840,
        "wires": [
            [
                "3e516a509b2dd415",
                "b96c219173e7cd16"
            ]
        ]
    },
    {
        "id": "32a117bdbfbba5e6",
        "type": "mqtt in",
        "z": "fe1c0fd7eae8cc55",
        "name": "",
        "topic": "mbus_meters/MBUS_36_0",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1370,
        "y": 760,
        "wires": [
            [
                "6efe00235f11a4a3"
            ]
        ]
    },
    {
        "id": "a4c717efe8c00198",
        "type": "mqtt in",
        "z": "fe1c0fd7eae8cc55",
        "name": "",
        "topic": "mbus_meters/MBUS_36_17",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e649abf8.0e7988",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 765,
        "y": 977,
        "wires": [
            [
                "6804d7a742cc29d4"
            ]
        ]
    },
    {
        "id": "6804d7a742cc29d4",
        "type": "function",
        "z": "fe1c0fd7eae8cc55",
        "name": "function 101",
        "func": "node.status({text: msg.payload});\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1157,
        "y": 870,
        "wires": [
            []
        ]
    },
    {
        "id": "6efe00235f11a4a3",
        "type": "function",
        "z": "fe1c0fd7eae8cc55",
        "name": "function 102",
        "func": "node.status({text: msg.payload});\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1611,
        "y": 664,
        "wires": [
            []
        ]
    }
]